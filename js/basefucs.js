// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let scheduleData = {};
let timeSlots = [];
let dayNames = [];
let typeNames = {};
let locationNames = {};
const daysCount = 7;

// –ú–∞—Å—Å–∏–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–∏–π (–Ω–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö)
const excludedTypes = [
  "bachata-advanced",
  "bachata-continuing",
  "bachata-general",
];

// –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —É—Ä–æ–≤–Ω–µ–π (–Ω–µ–≤–∏–¥–∏–º—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
const levelMapping = {
  // –ù–∞–±–æ—Ä
  –Ω–∞–±–æ—Ä: "–ù–∞–±–æ—Ä",
  "–∏–¥–µ—Ç –Ω–∞–±–æ—Ä": "–ù–∞–±–æ—Ä",
  0: "–ù–∞–±–æ—Ä",
  –æ–±—â–∏–π: "–ù–∞–±–æ—Ä",
  "–æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å": "–ù–∞–±–æ—Ä",

  // –ù–∞—á–∏–Ω–∞—é—â–∏–µ
  "0,2": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  "0,3": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  "0,4": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  "0,5": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  –Ω–∞—á–∏–Ω–∞—é—â–∏–µ: "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  "–Ω–∞—á–∏–Ω–∞—é—â–∞—è –≥—Ä—É–ø–ø–∞": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",

  // –ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ
  "0,6": "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
  "0,7": "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
  "0,8": "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
  "0,8-1": "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
  –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ: "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",

  // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ
  1: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  "1-2": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥—Ä—É–ø–ø–∞": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  –ø—Ä–æ—Ñ–∏: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  —Ö–æ—Ä–µ–æ: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  –∫—É—Ä—Å: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  "–±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",

  // –î–µ—Ç–∏
  –¥–µ—Ç—Å–∫–∞—è: "–î–µ—Ç–∏",
  –¥–µ—Ç–∏: "–î–µ—Ç–∏",
  "3-5 –ª–µ—Ç": "–î–µ—Ç–∏",
  "7-10 –ª–µ—Ç": "–î–µ—Ç–∏",
};

let activeFilters = {
  teachers: new Set(),
  levels: new Set(),
  types: new Set(),
  locations: new Set(),
  showMyGroupsOnly: false,
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ "–ú–æ–∏ –≥—Ä—É–ø–ø—ã"
let myGroups = new Set(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let isSelectMode = false; // –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø
let tempSelectedGroups = new Set(); // –í—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã

let openFilterGroups = new Set(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø —Ñ–∏–ª—å—Ç—Ä–æ–≤
let collapsedMobileDays = new Set(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç—ã—Ö –¥–Ω–µ–π –≤ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function loadData() {
  try {
    const response = await fetch("./data/data.json");
    const data = await response.json();
    scheduleData = data.schedule;
    timeSlots = data.timeSlots;
    dayNames = data.dayNames;
    typeNames = data.typeNames;
    locationNames = data.locationNames;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (data.myGroups) {
      myGroups = new Set(data.myGroups);
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–æ–∏ –≥—Ä—É–ø–ø—ã
      activeFilters.showMyGroupsOnly = true;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    // Fallback –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    scheduleData = {};
    timeSlots = [];
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è
function getClassKey(classItem, time, day) {
  return `${classItem.name}_${classItem.level}_${classItem.teacher}_${classItem.location}_${time}_${day}`;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
function extractAllData() {
  const teachers = new Set();
  const levels = new Set();
  const types = new Set();
  const locations = new Set();

  Object.values(scheduleData).forEach((timeData) => {
    Object.values(timeData).forEach((dayClasses) => {
      dayClasses.forEach((classItem) => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        const teacherList = classItem.teacher
          .split(/[,/]|\s–∏\s/)
          .map((t) => t.trim());
        teacherList.forEach((teacher) => teachers.add(teacher));

        // –ú–∞–ø–ø–∏–Ω–≥ —É—Ä–æ–≤–Ω–µ–π —á–µ—Ä–µ–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
        const mappedLevel =
          levelMapping[classItem.level.toLowerCase()] || classItem.level;
        levels.add(mappedLevel);

        types.add(classItem.type);
        locations.add(classItem.location);
      });
    });
  });

  return { teachers, levels, types, locations };
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ off-canvas —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
function toggleFilters() {
  const overlay = document.getElementById("filters-overlay");
  const sidebar = document.getElementById("filters-sidebar");

  overlay.classList.toggle("active");
  sidebar.classList.toggle("active");

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É body –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º —Å–∞–π–¥–±–∞—Ä–µ
  document.body.style.overflow = sidebar.classList.contains("active")
    ? "hidden"
    : "";
}

function closeFilters() {
  const overlay = document.getElementById("filters-overlay");
  const sidebar = document.getElementById("filters-sidebar");

  overlay.classList.remove("active");
  sidebar.classList.remove("active");
  document.body.style.overflow = "";
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
function toggleMyGroupsEditMode() {
  isSelectMode = !isSelectMode;

  const editBtn = document.getElementById("my-groups-edit-btn");
  const saveBtn = document.getElementById("my-groups-save-btn");

  if (isSelectMode) {
    console.log("üéØ –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø");

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    editBtn.classList.add("active");
    editBtn.textContent = "‚ùå";
    editBtn.title = "–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø";

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    saveBtn.style.display = "flex";

    // –í–ê–ñ–ù–û: –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ - –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    tempSelectedGroups.clear();
    console.log("üìù –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞");

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    showMyGroupsInstructions();
  } else {
    console.log("üö™ –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø");

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    editBtn.classList.remove("active");
    editBtn.textContent = "‚úèÔ∏è";
    editBtn.title = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∏ –≥—Ä—É–ø–ø—ã";

    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    saveBtn.style.display = "none";

    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä
    tempSelectedGroups.clear();
    console.log("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –æ—á–∏—â–µ–Ω");

    // –£–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    hideMyGroupsInstructions();
  }

  renderFilteredSchedule();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–∏—Ö –≥—Ä—É–ø–ø
async function saveMyGroupsData() {
  if (!isSelectMode) return;

  try {
    console.log(
      "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:",
      Array.from(tempSelectedGroups)
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¢–û–õ–¨–ö–û —Ç–µ–º–∏, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –≤ —Ä–µ–∂–∏–º–µ
    myGroups = new Set(tempSelectedGroups);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π JSON
    const response = await fetch("./data/data.json");
    const data = await response.json();
    data.myGroups = Array.from(myGroups);

    // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const dataStr = JSON.stringify(data, null, 2);
    const dataBlob = new Blob([dataStr], { type: "application/json" });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "data.json";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    console.log("‚úÖ –ù–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:", Array.from(myGroups));

    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    toggleMyGroupsEditMode();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    createMyGroupsControls();
    renderFilteredSchedule();
    updateStats();
    updateFilterFab();

    alert(
      `‚úÖ –ì—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø: ${myGroups.size}\n–§–∞–π–ª data.json —Å–∫–∞—á–∞–Ω. –ó–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –≤ –ø–∞–ø–∫–µ data/ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.`
    );
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error);
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: " + error.message);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function showMyGroupsInstructions() {
  const container = document.getElementById("myGroupsFilters");
  let instructionDiv = container.querySelector(".select-mode-instructions");

  if (!instructionDiv) {
    instructionDiv = document.createElement("div");
    instructionDiv.className = "select-mode-instructions";
    instructionDiv.innerHTML = `
      <strong>üéØ –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø –∞–∫—Ç–∏–≤–µ–Ω!</strong><br>
      –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –∑–∞–Ω—è—Ç–∏—è–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø.<br>
      –ù–∞–∂–º–∏—Ç–µ üíæ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.
    `;
    container.appendChild(instructionDiv);
  }
}

// –°–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function hideMyGroupsInstructions() {
  const container = document.getElementById("myGroupsFilters");
  const instructionDiv = container.querySelector(".select-mode-instructions");
  if (instructionDiv) {
    instructionDiv.remove();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function handleMyGroupsSelection(classItem, time, day, element) {
  if (!isSelectMode) return;

  const classKey = getClassKey(classItem, time, day);

  if (tempSelectedGroups.has(classKey)) {
    // –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    tempSelectedGroups.delete(classKey);
    element.classList.remove("selected-group");
    console.log("‚ûñ –£–±—Ä–∞–Ω–æ –∏–∑ –≥—Ä—É–ø–ø:", classItem.name);
  } else {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
    tempSelectedGroups.add(classKey);
    element.classList.add("selected-group");
    console.log("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—ã:", classItem.name);
  }

  console.log("üìä –í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø:", tempSelectedGroups.size);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–∏ –≥—Ä—É–ø–ø—ã"
function toggleMyGroupsFilter() {
  activeFilters.showMyGroupsOnly = !activeFilters.showMyGroupsOnly;

  const button = document.getElementById("my-groups-toggle");
  if (activeFilters.showMyGroupsOnly) {
    button.classList.add("active");
  } else {
    button.classList.remove("active");
  }

  renderFilteredSchedule();
  updateStats();
  updateFilterFab();
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ "–ú–æ–∏ –≥—Ä—É–ø–ø—ã"
function createMyGroupsControls() {
  const container = document.getElementById("myGroupsFilters");
  container.innerHTML = "";

  // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
  const toggleButton = document.createElement("button");
  toggleButton.id = "my-groups-toggle";
  toggleButton.className = "filter-button my-groups-main-toggle";
  toggleButton.textContent = `‚≠ê –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–∏ –≥—Ä—É–ø–ø—ã (${myGroups.size})`;
  if (activeFilters.showMyGroupsOnly) {
    toggleButton.classList.add("active");
  }
  toggleButton.onclick = toggleMyGroupsFilter;

  container.appendChild(toggleButton);

  // –ï—Å–ª–∏ –Ω–µ—Ç –≥—Ä—É–ø–ø, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (myGroups.size === 0) {
    const message = document.createElement("div");
    message.className = "no-groups-message";
    message.textContent =
      "–ì—Ä—É–ø–ø—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.";
    container.appendChild(message);
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞
  if (isSelectMode) {
    showMyGroupsInstructions();
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≤–∞—é—â–µ–π –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function updateFilterFab() {
  const tagsContainer = document.getElementById("filter-fab-tags");
  const fab = document.getElementById("filter-fab");

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  const activeTags = [];

  if (activeFilters.showMyGroupsOnly) {
    activeTags.push({ type: "myGroups", value: "–ú–æ–∏ –≥—Ä—É–ø–ø—ã" });
  }

  activeFilters.teachers.forEach((teacher) => {
    activeTags.push({ type: "teacher", value: teacher.split(" ")[0] }); // –¢–æ–ª—å–∫–æ –∏–º—è
  });

  activeFilters.levels.forEach((level) => {
    activeTags.push({ type: "level", value: level });
  });

  activeFilters.types.forEach((type) => {
    const displayName = typeNames[type] || type;
    activeTags.push({ type: "type", value: displayName.split(" ")[0] }); // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
  });

  activeFilters.locations.forEach((location) => {
    const displayName = locationNames[location] || location;
    activeTags.push({
      type: "location",
      value: displayName.includes("8 –ú–∞—Ä—Ç–∞") ? "8 –ú–∞—Ä—Ç–∞" : "–ö–∞—Ä–ª–∞ –õ.",
    });
  });

  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  tagsContainer.innerHTML = "";

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ (–º–∞–∫—Å–∏–º—É–º 4)
  const maxTags = 4;
  const displayTags = activeTags.slice(0, maxTags);

  displayTags.forEach((tag) => {
    const tagElement = document.createElement("span");
    tagElement.className = "filter-fab-tag";
    tagElement.textContent = tag.value;
    tagsContainer.appendChild(tagElement);
  });

  // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Ñ–∏–ª—å—Ç—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
  if (activeTags.length > maxTags) {
    const moreTag = document.createElement("span");
    moreTag.className = "filter-fab-tag";
    moreTag.textContent = `+${activeTags.length - maxTags}`;
    tagsContainer.appendChild(moreTag);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  if (activeTags.length > 0) {
    fab.style.minWidth = "120px";
  } else {
    fab.style.minWidth = "60px";
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
function createLevelFilterButtons(container, levels) {
  container.innerHTML = "";
  // –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —É—Ä–æ–≤–Ω–µ–π
  const fixedOrder = [
    "–ù–∞–±–æ—Ä",
    "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
    "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
    "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
    "–î–µ—Ç–∏",
  ];

  fixedOrder.forEach((level) => {
    if (levels.has(level)) {
      const button = document.createElement("button");
      button.className = "filter-button";
      button.textContent = level;
      button.onclick = () => toggleFilter("levels", level, button);
      container.appendChild(button);
    }
  });
}

function createFilterButtons(container, items, filterType) {
  container.innerHTML = "";
  [...items].sort().forEach((item) => {
    const button = document.createElement("button");
    button.className = "filter-button";
    button.textContent = item;
    button.onclick = () => toggleFilter(filterType, item, button);
    container.appendChild(button);
  });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å —É—á–µ—Ç–æ–º –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
function toggleFilter(type, value, button) {
  const wasPreviouslyActive = activeFilters[type].has(value);

  if (wasPreviouslyActive) {
    activeFilters[type].delete(value);
    button.classList.remove("active");

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    button.style.background = "";
    button.style.color = "";
    button.style.transform = "";
    button.style.boxShadow = "";
    button.style.borderColor = "";

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
    setTimeout(() => {
      if (!button.classList.contains("active")) {
        button.style.background = "linear-gradient(145deg, #ffffff, #f8f9fa)";
        button.style.color = "#495057";
        button.style.borderColor = "rgba(108, 117, 125, 0.2)";
        button.style.boxShadow = "0 2px 4px rgba(0, 0, 0, 0.05)";
      }
    }, 50);
  } else {
    activeFilters[type].add(value);
    button.classList.add("active");
  }

  renderFilteredSchedule();
  updateStats();
  updateFilterFab();
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
function clearAllFilters() {
  activeFilters = {
    teachers: new Set(),
    levels: new Set(),
    types: new Set(),
    locations: new Set(),
    showMyGroupsOnly: false,
  };

  document.querySelectorAll(".filter-button").forEach((btn) => {
    btn.classList.remove("active");
  });

  // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ–≥–æ
  if (isSelectMode) {
    toggleMyGroupsEditMode();
  }

  renderFilteredSchedule();
  updateStats();
  updateFilterFab();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ (accordion behavior)
function toggleFilterGroup(groupId) {
  const options = document.getElementById(groupId);
  const toggle = document.querySelector(
    `[onclick="toggleFilterGroup('${groupId}')"] .filter-toggle`
  );

  // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º
  if (openFilterGroups.has(groupId)) {
    options.classList.remove("expanded");
    options.classList.add("collapsed");
    toggle.classList.add("collapsed");
    openFilterGroups.delete(groupId);
  } else {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≥—Ä—É–ø–ø—ã
    openFilterGroups.forEach((openGroupId) => {
      const openOptions = document.getElementById(openGroupId);
      const openToggle = document.querySelector(
        `[onclick="toggleFilterGroup('${openGroupId}')"] .filter-toggle`
      );
      if (openOptions && openToggle) {
        openOptions.classList.remove("expanded");
        openOptions.classList.add("collapsed");
        openToggle.classList.add("collapsed");
      }
    });
    openFilterGroups.clear();

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
    options.classList.remove("collapsed");
    options.classList.add("expanded");
    toggle.classList.remove("collapsed");
    openFilterGroups.add(groupId);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º
function matchesFilters(classItem, time, day) {
  // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ñ–∏–ª—å—Ç—Ä "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–∏ –≥—Ä—É–ø–ø—ã"
  if (activeFilters.showMyGroupsOnly) {
    const classKey = getClassKey(classItem, time, day);
    return myGroups.has(classKey);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–ø–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–º—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö)
  if (activeFilters.teachers.size > 0) {
    const teacherList = classItem.teacher
      .split(/[,/]|\s–∏\s/)
      .map((t) => t.trim());
    const hasMatchingTeacher = teacherList.some((teacher) =>
      activeFilters.teachers.has(teacher)
    );
    if (!hasMatchingTeacher) return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞–ø–ø–∏–Ω–≥–∞
  if (activeFilters.levels.size > 0) {
    const mappedLevel =
      levelMapping[classItem.level.toLowerCase()] || classItem.level;
    if (!activeFilters.levels.has(mappedLevel)) {
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
  if (
    activeFilters.types.size > 0 &&
    !activeFilters.types.has(classItem.type)
  ) {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
  if (
    activeFilters.locations.size > 0 &&
    !activeFilters.locations.has(classItem.location)
  ) {
    return false;
  }

  return true;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–Ω—è –≤ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
function toggleMobileDay(dayIndex) {
  if (window.innerWidth <= 768) {
    const dayCard = document.querySelector(`[data-day-index="${dayIndex}"]`);
    const content = dayCard.querySelector(".mobile-day-content");

    if (collapsedMobileDays.has(dayIndex)) {
      content.style.display = "block";
      collapsedMobileDays.delete(dayIndex);
    } else {
      content.style.display = "none";
      collapsedMobileDays.add(dayIndex);
    }
  }
}

function createClassItem(classData, time, day) {
  const locationClass =
    classData.location === "8 –º–∞—Ä—Ç–∞" ? "loc-8marta" : "loc-libknehta";
  const locationText = classData.location === "8 –º–∞—Ä—Ç–∞" ? "8–ú" : "–ö–õ";

  const classKey = getClassKey(classData, time, day);
  const isMyGroup = myGroups.has(classKey);

  let additionalClasses = "";
  let showStar = false;

  if (isSelectMode) {
    // –í —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º —Å–µ–π—á–∞—Å
    const isCurrentlySelected = tempSelectedGroups.has(classKey);
    if (isCurrentlySelected) {
      additionalClasses += " selected-group";
    }
  } else {
    // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    if (isMyGroup) {
      additionalClasses += " my-group";
      showStar = true;
    }
  }

  const clickHandler = isSelectMode
    ? `handleMyGroupsSelection(${JSON.stringify(classData).replace(
        /"/g,
        "&quot;"
      )}, '${time}', ${day}, this)`
    : `showClassDetails('${classData.name}', '${classData.level}', '${classData.teacher}', '${classData.location}')`;

  return `
        <div class="class-item ${
          classData.type
        }${additionalClasses}" onclick="${clickHandler}">
            ${showStar ? '<div class="my-group-star">‚≠ê</div>' : ""}
            <div class="class-location ${locationClass}">${locationText}</div>
            <div class="class-name">${classData.name}</div>
            <div class="class-level">${classData.level}</div>
            <div class="class-teacher">${classData.teacher}</div>
        </div>
    `;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—Ç–∞–±–ª–∏—Ü–∞)
function renderTableSchedule() {
  const tbody = document.getElementById("schedule-body");
  tbody.innerHTML = "";

  timeSlots.forEach((time) => {
    const row = document.createElement("tr");

    // –Ø—á–µ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    const timeCell = document.createElement("td");
    timeCell.className = "time-cell";
    timeCell.textContent = time;
    row.appendChild(timeCell);

    // –Ø—á–µ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    for (let day = 0; day < daysCount; day++) {
      const dayCell = document.createElement("td");
      dayCell.className = "class-cell";

      if (scheduleData[time] && scheduleData[time][day]) {
        const classes = scheduleData[time][day].filter((cls) =>
          matchesFilters(cls, time, day)
        );
        if (classes.length > 0) {
          dayCell.innerHTML = classes
            .map((cls) => createClassItem(cls, time, day))
            .join("");
        } else {
          dayCell.innerHTML = '<div class="empty-cell">‚Äî</div>';
        }
      } else {
        dayCell.innerHTML = '<div class="empty-cell">‚Äî</div>';
      }

      row.appendChild(dayCell);
    }

    tbody.appendChild(row);
  });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∫–∞—Ä—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
function renderMobileSchedule() {
  const container = document.getElementById("mobile-schedule");
  container.innerHTML = "";

  dayNames.forEach((dayName, dayIndex) => {
    const dayCard = document.createElement("div");
    dayCard.className = "mobile-day-card";
    dayCard.setAttribute("data-day-index", dayIndex);

    const dayTitle = document.createElement("div");
    dayTitle.className = "mobile-day-title";
    dayTitle.textContent = dayName;
    dayTitle.onclick = () => toggleMobileDay(dayIndex);
    dayTitle.style.cursor = "pointer";
    dayCard.appendChild(dayTitle);

    const dayContent = document.createElement("div");
    dayContent.className = "mobile-day-content";

    let hasClasses = false;

    timeSlots.forEach((time) => {
      if (scheduleData[time] && scheduleData[time][dayIndex]) {
        const classes = scheduleData[time][dayIndex].filter((cls) =>
          matchesFilters(cls, time, dayIndex)
        );
        if (classes.length > 0) {
          hasClasses = true;

          const timeSlot = document.createElement("div");
          timeSlot.className = "mobile-time-slot";

          const timeHeader = document.createElement("div");
          timeHeader.className = "mobile-time-header";
          timeHeader.textContent = time;
          timeSlot.appendChild(timeHeader);

          const classesContainer = document.createElement("div");
          classesContainer.className = "mobile-classes";
          classesContainer.innerHTML = classes
            .map((cls) => createClassItem(cls, time, dayIndex))
            .join("");
          timeSlot.appendChild(classesContainer);

          dayContent.appendChild(timeSlot);
        }
      }
    });

    if (hasClasses) {
      dayCard.appendChild(dayContent);
      container.appendChild(dayCard);
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–Ω—å, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π
      const emptySlot = document.createElement("div");
      emptySlot.className = "mobile-time-slot";
      emptySlot.innerHTML = '<div class="empty-cell">–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç</div>';
      dayContent.appendChild(emptySlot);
      dayCard.appendChild(dayContent);
      container.appendChild(dayCard);
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    if (collapsedMobileDays.has(dayIndex)) {
      dayContent.style.display = "none";
    }
  });
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
function renderFilteredSchedule() {
  renderTableSchedule();
  renderMobileSchedule();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
  let totalClasses = 0;

  Object.keys(scheduleData).forEach((time) => {
    Object.keys(scheduleData[time]).forEach((day) => {
      totalClasses += scheduleData[time][day].filter((cls) =>
        matchesFilters(cls, time, parseInt(day))
      ).length;
    });
  });

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  let activeFiltersCount = 0;
  if (activeFilters.showMyGroupsOnly) activeFiltersCount++;
  activeFiltersCount += activeFilters.teachers.size;
  activeFiltersCount += activeFilters.levels.size;
  activeFiltersCount += activeFilters.types.size;
  activeFiltersCount += activeFilters.locations.size;

  document.getElementById("stats").innerHTML = `
        <span style="color: #f39c12;">üìä –ü–æ–∫–∞–∑–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–π:</span> <strong>${totalClasses}</strong> | 
        <span style="color: #f39c12;">üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</span> <strong>${activeFiltersCount}</strong>
    `;
}

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞–Ω—è—Ç–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function showClassDetails(name, level, teacher, location) {
  const locationName =
    location === "8 –º–∞—Ä—Ç–∞"
      ? "—É–ª. 8 –ú–∞—Ä—Ç–∞, 8–î (–¢–¶ –ú—ã—Ç–Ω—ã–π –î–≤–æ—Ä, 2 —ç—Ç–∞–∂)"
      : "—É–ª. –ö–∞—Ä–ª–∞ –õ–∏–±–∫–Ω–µ—Ö—Ç–∞, 22 (–ë–¶ –ö–æ–Ω—Å—É–ª, 2 —ç—Ç–∞–∂)";

  document.getElementById("modal-title").textContent = name;
  document.getElementById("modal-body").innerHTML = `
        <div class="detail-row">
            <div class="detail-label">–£—Ä–æ–≤–µ–Ω—å:</div>
            <div>${level}</div>
        </div>
        <div class="detail-row">
            <div class="detail-label">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</div>
            <div>${teacher}</div>
        </div>
        <div class="detail-row">
            <div class="detail-label">–õ–æ–∫–∞—Ü–∏—è:</div>
            <div>${locationName}</div>
        </div>
    `;

  document.getElementById("class-modal").style.display = "block";
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
  document.getElementById("class-modal").style.display = "none";
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = function (event) {
  const modal = document.getElementById("class-modal");
  if (event.target === modal) {
    closeModal();
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ Escape
document.addEventListener("keydown", function (event) {
  if (event.key === "Escape") {
    closeModal();
    closeFilters();
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initializeApp() {
  console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");

  await loadData();

  const { teachers, levels, types, locations } = extractAllData();

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
  createFilterButtons(
    document.getElementById("teacherFilters"),
    teachers,
    "teachers"
  );

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —É—Ä–æ–≤–Ω–µ–π —Å –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
  const levelContainer = document.getElementById("levelFilters");
  levelContainer.innerHTML = "";
  const fixedOrder = [
    "–ù–∞–±–æ—Ä",
    "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
    "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
    "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
    "–î–µ—Ç–∏",
  ];

  fixedOrder.forEach((level) => {
    if (levels.has(level)) {
      const button = document.createElement("button");
      button.className = "filter-button";
      button.textContent = level;
      button.onclick = () => toggleFilter("levels", level, button);
      levelContainer.appendChild(button);
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ç–∏–ø–æ–≤ —Å —á–∏—Ç–∞–µ–º—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ (—Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏)
  const typeButtons = document.getElementById("typeFilters");
  typeButtons.innerHTML = "";

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∏–ø—ã, –∏—Å–∫–ª—é—á–∞—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ
  const filteredTypes = [...types].filter(
    (type) => !excludedTypes.includes(type)
  );

  filteredTypes.sort().forEach((type) => {
    const button = document.createElement("button");
    button.className = "filter-button";
    button.textContent = typeNames[type] || type;
    button.onclick = () => toggleFilter("types", type, button);
    typeButtons.appendChild(button);
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ª–æ–∫–∞—Ü–∏–π —Å —á–∏—Ç–∞–µ–º—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
  const locationButtons = document.getElementById("locationFilters");
  locationButtons.innerHTML = "";
  [...locations].sort().forEach((location) => {
    const button = document.createElement("button");
    button.className = "filter-button";
    button.textContent = locationNames[location] || location;
    button.onclick = () => toggleFilter("locations", location, button);
    locationButtons.appendChild(button);
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ "–ú–æ–∏ –≥—Ä—É–ø–ø—ã"
  createMyGroupsControls();

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Å–µ–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–≤–µ—Ä–Ω—É—Ç—ã, –∫—Ä–æ–º–µ "–ú–æ–∏ –≥—Ä—É–ø–ø—ã"
  ["teacherFilters", "levelFilters", "typeFilters", "locationFilters"].forEach(
    (groupId) => {
      const options = document.getElementById(groupId);
      const toggle = document.querySelector(
        `[onclick="toggleFilterGroup('${groupId}')"] .filter-toggle`
      );
      if (options && toggle) {
        options.classList.add("collapsed");
        toggle.classList.add("collapsed");
      }
    }
  );

  // –§–∏–ª—å—Ç—Ä "–ú–æ–∏ –≥—Ä—É–ø–ø—ã" –æ—Ç–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç—ã—Ö
  openFilterGroups.add("myGroupsFilters");

  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
  renderFilteredSchedule();
  updateStats();
  updateFilterFab();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  window.addEventListener("resize", () => {
    // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
    renderFilteredSchedule();
  });

  console.log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ì—Ä—É–ø–ø –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", myGroups.size);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener("DOMContentLoaded", initializeApp);
