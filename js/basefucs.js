// === MAXDANCE V2.0 - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô BASEFUCS.JS ===

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let scheduleData = {};
let timeSlots = [];
let dayNames = [];
let typeNames = {};
let locationNames = {};
const daysCount = 7;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ auth.js)
let currentUser = null;
let userProfile = null;
let supabase = null;

// –ú–∞—Å—Å–∏–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–∏–π
const excludedTypes = [
  "bachata-advanced",
  "bachata-continuing",
  "bachata-general",
];

// –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —É—Ä–æ–≤–Ω–µ–π
const levelMapping = {
  –Ω–∞–±–æ—Ä: "–ù–∞–±–æ—Ä",
  "–∏–¥–µ—Ç –Ω–∞–±–æ—Ä": "–ù–∞–±–æ—Ä",
  0: "–ù–∞–±–æ—Ä",
  –æ–±—â–∏–π: "–ù–∞–±–æ—Ä",
  "–æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å": "–ù–∞–±–æ—Ä",
  "0,2": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  "0,3": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  "0,4": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  "0,5": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  –Ω–∞—á–∏–Ω–∞—é—â–∏–µ: "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  "–Ω–∞—á–∏–Ω–∞—é—â–∞—è –≥—Ä—É–ø–ø–∞": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  "0,6": "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
  "0,7": "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
  "0,8": "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
  "0,8-1": "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
  –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ: "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
  1: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  "1-2": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥—Ä—É–ø–ø–∞": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  –ø—Ä–æ—Ñ–∏: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  —Ö–æ—Ä–µ–æ: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  –∫—É—Ä—Å: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  "–±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  –¥–µ—Ç—Å–∫–∞—è: "–î–µ—Ç–∏",
  –¥–µ—Ç–∏: "–î–µ—Ç–∏",
  "3-5 –ª–µ—Ç": "–î–µ—Ç–∏",
  "7-10 –ª–µ—Ç": "–î–µ—Ç–∏",
};

let activeFilters = {
  teachers: new Set(),
  levels: new Set(),
  types: new Set(),
  locations: new Set(),
  showMyGroupsOnly: false,
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ "–ú–æ–∏ –≥—Ä—É–ø–ø—ã"
let myGroups = new Set();
let isSelectMode = false;
let tempSelectedGroups = new Set();

let openFilterGroups = new Set();
let collapsedMobileDays = new Set();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
let adminPanelData = {
  scheduleClasses: [],
  classTypes: [],
  locations: [],
  teachers: [],
};
let isAdminPanelOpen = false;

// === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===

async function loadData() {
  try {
    console.log("üì° –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...");

    let data;

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
      if (typeof loadScheduleFromDatabase === "function") {
        data = await loadScheduleFromDatabase();
        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
      } else {
        throw new Error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
      }
    } catch (dbError) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –±–∞–∑—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º JSON:", dbError);

      // Fallback –∫ JSON —Ñ–∞–π–ª—É
      const response = await fetch("./data/data.json");
      data = await response.json();
      console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ JSON —Ñ–∞–π–ª–∞");
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    scheduleData = data.schedule;
    timeSlots = data.timeSlots;
    dayNames = data.dayNames;
    typeNames = data.typeNames;
    locationNames = data.locationNames;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (currentUser && typeof getUserSavedGroups === "function") {
      try {
        const userGroups = await getUserSavedGroups();
        myGroups = new Set(userGroups);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${myGroups.size} –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
      } catch (error) {
        console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:", error);
        myGroups = new Set();
      }
    } else if (data.myGroups) {
      myGroups = new Set(data.myGroups);
      activeFilters.showMyGroupsOnly = true;
    }

    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    scheduleData = {};
    timeSlots = [];
    dayNames = [];
    typeNames = {};
    locationNames = {};
    myGroups = new Set();
  }
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

function getClassKey(classItem, time, day) {
  if (classItem.id) {
    return `db_${classItem.id}`;
  }
  return `${classItem.name}_${classItem.level}_${classItem.teacher}_${classItem.location}_${time}_${day}`;
}

function isAdmin() {
  return currentUser && userProfile && userProfile.is_admin === true;
}

function extractAllData() {
  const teachers = new Set();
  const levels = new Set();
  const types = new Set();
  const locations = new Set();

  Object.values(scheduleData).forEach((timeData) => {
    Object.values(timeData).forEach((dayClasses) => {
      dayClasses.forEach((classItem) => {
        const teacherList = classItem.teacher
          .split(/[,/]|\s–∏\s/)
          .map((t) => t.trim());
        teacherList.forEach((teacher) => teachers.add(teacher));

        const mappedLevel =
          levelMapping[classItem.level.toLowerCase()] || classItem.level;
        levels.add(mappedLevel);

        types.add(classItem.type);
        locations.add(classItem.location);
      });
    });
  });

  return { teachers, levels, types, locations };
}

function matchesFilters(classItem, time, day) {
  if (activeFilters.showMyGroupsOnly) {
    const classKey = getClassKey(classItem, time, day);
    return myGroups.has(classKey);
  }

  if (activeFilters.teachers.size > 0) {
    const teacherList = classItem.teacher
      .split(/[,/]|\s–∏\s/)
      .map((t) => t.trim());
    const hasMatchingTeacher = teacherList.some((teacher) =>
      activeFilters.teachers.has(teacher)
    );
    if (!hasMatchingTeacher) return false;
  }

  if (activeFilters.levels.size > 0) {
    const mappedLevel =
      levelMapping[classItem.level.toLowerCase()] || classItem.level;
    if (!activeFilters.levels.has(mappedLevel)) return false;
  }

  if (activeFilters.types.size > 0 && !activeFilters.types.has(classItem.type))
    return false;
  if (
    activeFilters.locations.size > 0 &&
    !activeFilters.locations.has(classItem.location)
  )
    return false;

  return true;
}

// === –°–û–ó–î–ê–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–ê –ó–ê–ù–Ø–¢–ò–Ø ===

function createClassItem(classData, time, day) {
  const locationClass =
    classData.location === "8 –º–∞—Ä—Ç–∞" ? "loc-8marta" : "loc-libknehta";
  const locationText = classData.location === "8 –º–∞—Ä—Ç–∞" ? "8–ú" : "–ö–õ";

  const classKey = getClassKey(classData, time, day);
  const isMyGroup = myGroups.has(classKey);

  let additionalClasses = "";
  let showStar = false;

  if (isSelectMode) {
    const isCurrentlySelected = tempSelectedGroups.has(classKey);
    if (isCurrentlySelected) {
      additionalClasses += " selected-group";
    }
  } else {
    if (isMyGroup) {
      additionalClasses += " my-group";
      showStar = true;
    }
  }

  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  let actionButtons = "";
  if (
    currentUser &&
    !isSelectMode &&
    typeof addToPersonalSchedule === "function"
  ) {
    const safeClassData = JSON.stringify(classData).replace(/"/g, "&quot;");
    actionButtons = `
      <div class="class-actions">
        <button class="add-to-personal-btn" 
                onclick="event.stopPropagation(); addToPersonalSchedule(${safeClassData}, '${time}', ${day})"
                title="–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ">‚ûï</button>
      </div>
    `;
  }

  // –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞
  let adminButtons = "";
  if (isAdmin() && !isSelectMode && classData.id) {
    adminButtons = `
      <div class="admin-actions">
        <button class="edit-class-btn" 
                onclick="event.stopPropagation(); editScheduleClassQuick(${classData.id})"
                title="–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ">‚úèÔ∏è</button>
        <button class="delete-class-btn" 
                onclick="event.stopPropagation(); deleteScheduleClassQuick(${classData.id})"
                title="–£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ">üóëÔ∏è</button>
      </div>
    `;
  }

  const clickHandler = isSelectMode
    ? `handleMyGroupsSelection(${JSON.stringify(classData).replace(
        /"/g,
        "&quot;"
      )}, '${time}', ${day}, this)`
    : `showClassDetails('${classData.name}', '${classData.level}', '${classData.teacher}', '${classData.location}')`;

  return `
    <div class="class-item ${
      classData.type
    }${additionalClasses}" onclick="${clickHandler}">
      ${showStar ? '<div class="my-group-star">‚≠ê</div>' : ""}
      <div class="class-location ${locationClass}">${locationText}</div>
      <div class="class-name">${classData.name}</div>
      <div class="class-level">${classData.level}</div>
      <div class="class-teacher">${classData.teacher}</div>
      ${actionButtons}
      ${adminButtons}
    </div>
  `;
}

// === –†–ï–ù–î–ï–†–ò–ù–ì –†–ê–°–ü–ò–°–ê–ù–ò–Ø (–í–ê–®–ê –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø) ===

function renderTableSchedule() {
  const tbody = document.getElementById("schedule-body");
  tbody.innerHTML = "";

  timeSlots.forEach((time) => {
    const row = document.createElement("tr");

    // –Ø—á–µ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    const timeCell = document.createElement("td");
    timeCell.className = "time-cell";
    timeCell.textContent = time;
    row.appendChild(timeCell);

    // –Ø—á–µ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    for (let day = 0; day < daysCount; day++) {
      const dayCell = document.createElement("td");
      dayCell.className = "class-cell";

      if (scheduleData[time] && scheduleData[time][day]) {
        const classes = scheduleData[time][day].filter((cls) =>
          matchesFilters(cls, time, day)
        );
        if (classes.length > 0) {
          dayCell.innerHTML = classes
            .map((cls) => createClassItem(cls, time, day))
            .join("");
        } else {
          dayCell.innerHTML = '<div class="empty-cell">‚Äî</div>';
        }
      } else {
        dayCell.innerHTML = '<div class="empty-cell">‚Äî</div>';
      }

      row.appendChild(dayCell);
    }

    tbody.appendChild(row);
  });
}

function renderMobileSchedule() {
  const container = document.getElementById("mobile-schedule");
  container.innerHTML = "";

  dayNames.forEach((dayName, dayIndex) => {
    const dayCard = document.createElement("div");
    dayCard.className = "mobile-day-card";
    dayCard.setAttribute("data-day-index", dayIndex);

    const dayTitle = document.createElement("div");
    dayTitle.className = "mobile-day-title";
    dayTitle.textContent = dayName;
    dayTitle.onclick = () => toggleMobileDay(dayIndex);
    dayTitle.style.cursor = "pointer";
    dayCard.appendChild(dayTitle);

    const dayContent = document.createElement("div");
    dayContent.className = "mobile-day-content";

    let hasClasses = false;

    timeSlots.forEach((time) => {
      if (scheduleData[time] && scheduleData[time][dayIndex]) {
        const classes = scheduleData[time][dayIndex].filter((cls) =>
          matchesFilters(cls, time, dayIndex)
        );
        if (classes.length > 0) {
          hasClasses = true;

          const timeSlot = document.createElement("div");
          timeSlot.className = "mobile-time-slot";

          const timeHeader = document.createElement("div");
          timeHeader.className = "mobile-time-header";
          timeHeader.textContent = time;
          timeSlot.appendChild(timeHeader);

          const classesContainer = document.createElement("div");
          classesContainer.className = "mobile-classes";
          classesContainer.innerHTML = classes
            .map((cls) => createClassItem(cls, time, dayIndex))
            .join("");
          timeSlot.appendChild(classesContainer);

          dayContent.appendChild(timeSlot);
        }
      }
    });

    if (hasClasses) {
      dayCard.appendChild(dayContent);
      container.appendChild(dayCard);
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    if (collapsedMobileDays.has(dayIndex)) {
      dayContent.style.display = "none";
    }
  });
}

function renderFilteredSchedule() {
  renderTableSchedule();
  renderMobileSchedule();
}

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê–ú–ò ===

function toggleFilters() {
  const overlay = document.getElementById("filters-overlay");
  const sidebar = document.getElementById("filters-sidebar");

  overlay.classList.toggle("active");
  sidebar.classList.toggle("active");

  document.body.style.overflow = sidebar.classList.contains("active")
    ? "hidden"
    : "";
}

function closeFilters() {
  const overlay = document.getElementById("filters-overlay");
  const sidebar = document.getElementById("filters-sidebar");

  overlay.classList.remove("active");
  sidebar.classList.remove("active");
  document.body.style.overflow = "";
}

function toggleFilter(type, value, button) {
  const wasPreviouslyActive = activeFilters[type].has(value);

  if (wasPreviouslyActive) {
    activeFilters[type].delete(value);
    button.classList.remove("active");
  } else {
    activeFilters[type].add(value);
    button.classList.add("active");
  }

  renderFilteredSchedule();
  updateStats();
  updateFilterFab();
}

function clearAllFilters() {
  activeFilters = {
    teachers: new Set(),
    levels: new Set(),
    types: new Set(),
    locations: new Set(),
    showMyGroupsOnly: false,
  };

  document.querySelectorAll(".filter-button").forEach((btn) => {
    btn.classList.remove("active");
  });

  if (isSelectMode) {
    toggleMyGroupsEditMode();
  }

  renderFilteredSchedule();
  updateStats();
  updateFilterFab();
}

function toggleFilterGroup(groupId) {
  const options = document.getElementById(groupId);
  const toggle = document.querySelector(
    `[onclick="toggleFilterGroup('${groupId}')"] .filter-toggle`
  );

  if (openFilterGroups.has(groupId)) {
    options.classList.remove("expanded");
    options.classList.add("collapsed");
    toggle.classList.add("collapsed");
    openFilterGroups.delete(groupId);
  } else {
    openFilterGroups.forEach((openGroupId) => {
      const openOptions = document.getElementById(openGroupId);
      const openToggle = document.querySelector(
        `[onclick="toggleFilterGroup('${openGroupId}')"] .filter-toggle`
      );
      if (openOptions && openToggle) {
        openOptions.classList.remove("expanded");
        openOptions.classList.add("collapsed");
        openToggle.classList.add("collapsed");
      }
    });
    openFilterGroups.clear();

    options.classList.remove("collapsed");
    options.classList.add("expanded");
    toggle.classList.remove("collapsed");
    openFilterGroups.add(groupId);
  }
}

// === –ú–û–ò –ì–†–£–ü–ü–´ ===

function toggleMyGroupsEditMode() {
  isSelectMode = !isSelectMode;

  const editBtn = document.getElementById("my-groups-edit-btn");
  const saveBtn = document.getElementById("my-groups-save-btn");

  if (isSelectMode) {
    editBtn.classList.add("active");
    editBtn.textContent = "‚ùå";
    editBtn.title = "–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø";
    saveBtn.style.display = "flex";
    tempSelectedGroups.clear();
    showMyGroupsInstructions();
  } else {
    editBtn.classList.remove("active");
    editBtn.textContent = "‚úèÔ∏è";
    editBtn.title = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∏ –≥—Ä—É–ø–ø—ã";
    saveBtn.style.display = "none";
    tempSelectedGroups.clear();
    hideMyGroupsInstructions();
  }

  renderFilteredSchedule();
}

function handleMyGroupsSelection(classItem, time, day, element) {
  if (!isSelectMode) return;

  const classKey = getClassKey(classItem, time, day);

  if (tempSelectedGroups.has(classKey)) {
    tempSelectedGroups.delete(classKey);
    element.classList.remove("selected-group");
  } else {
    tempSelectedGroups.add(classKey);
    element.classList.add("selected-group");
  }
}

async function saveMyGroupsData() {
  if (!isSelectMode) return;

  try {
    myGroups = new Set(tempSelectedGroups);

    if (currentUser && typeof saveUserGroups === "function") {
      await saveUserGroups([...myGroups]);
      alert(`‚úÖ –ì—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—ã–±—Ä–∞–Ω–æ: ${myGroups.size}`);
    } else {
      // Fallback –∫ JSON —Å–∫–∞—á–∏–≤–∞–Ω–∏—é
      const response = await fetch("./data/data.json");
      const data = await response.json();
      data.myGroups = Array.from(myGroups);

      const dataStr = JSON.stringify(data, null, 2);
      const dataBlob = new Blob([dataStr], { type: "application/json" });
      const url = URL.createObjectURL(dataBlob);
      const link = document.createElement("a");
      link.href = url;
      link.download = "data.json";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      alert(
        `‚úÖ –ì—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—ã–±—Ä–∞–Ω–æ: ${myGroups.size}\n–§–∞–π–ª data.json —Å–∫–∞—á–∞–Ω.`
      );
    }

    toggleMyGroupsEditMode();
    createMyGroupsControls();
    renderFilteredSchedule();
    updateStats();
    updateFilterFab();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error);
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: " + error.message);
  }
}

function toggleMyGroupsFilter() {
  activeFilters.showMyGroupsOnly = !activeFilters.showMyGroupsOnly;

  const button = document.getElementById("my-groups-toggle");
  if (activeFilters.showMyGroupsOnly) {
    button.classList.add("active");
  } else {
    button.classList.remove("active");
  }

  renderFilteredSchedule();
  updateStats();
  updateFilterFab();
}

function createMyGroupsControls() {
  const container = document.getElementById("myGroupsFilters");
  container.innerHTML = "";

  const toggleButton = document.createElement("button");
  toggleButton.id = "my-groups-toggle";
  toggleButton.className = "filter-button my-groups-main-toggle";

  const groupsText =
    currentUser && userProfile
      ? `‚≠ê –ú–æ–∏ –≥—Ä—É–ø–ø—ã (${myGroups.size})`
      : `‚≠ê –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–∏ –≥—Ä—É–ø–ø—ã (${myGroups.size})`;
  toggleButton.textContent = groupsText;

  if (activeFilters.showMyGroupsOnly) {
    toggleButton.classList.add("active");
  }
  toggleButton.onclick = toggleMyGroupsFilter;
  container.appendChild(toggleButton);

  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (currentUser) {
    const personalScheduleButton = document.createElement("button");
    personalScheduleButton.className = "filter-button personal-schedule-btn";
    personalScheduleButton.textContent = "üìÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ";
    personalScheduleButton.onclick = () => {
      if (typeof showPersonalSchedule === "function") {
        showPersonalSchedule();
      } else {
        alert("üöß –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!");
      }
    };
    container.appendChild(personalScheduleButton);
  }

  // –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  if (isAdmin()) {
    const adminPanelButton = document.createElement("button");
    adminPanelButton.className = "filter-button admin-panel-btn";
    adminPanelButton.textContent = "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å";
    adminPanelButton.onclick = showAdminPanel;
    container.appendChild(adminPanelButton);
  }

  if (myGroups.size === 0) {
    const message = document.createElement("div");
    message.className = "no-groups-message";
    message.textContent = currentUser
      ? "–ì—Ä—É–ø–ø—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
      : "–ì—Ä—É–ø–ø—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.";
    container.appendChild(message);
  }

  if (isSelectMode) {
    showMyGroupsInstructions();
  }
}

function showMyGroupsInstructions() {
  const container = document.getElementById("myGroupsFilters");
  let instructionDiv = container.querySelector(".select-mode-instructions");

  if (!instructionDiv) {
    instructionDiv = document.createElement("div");
    instructionDiv.className = "select-mode-instructions";
    instructionDiv.innerHTML = `
      <strong>üéØ –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø –∞–∫—Ç–∏–≤–µ–Ω!</strong><br>
      –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –∑–∞–Ω—è—Ç–∏—è–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø.<br>
      –ù–∞–∂–º–∏—Ç–µ üíæ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.
    `;
    container.appendChild(instructionDiv);
  }
}

function hideMyGroupsInstructions() {
  const container = document.getElementById("myGroupsFilters");
  const instructionDiv = container.querySelector(".select-mode-instructions");
  if (instructionDiv) {
    instructionDiv.remove();
  }
}

// === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ (–£–ü–†–û–©–ï–ù–ù–ê–Ø) ===

async function showAdminPanel() {
  if (!isAdmin()) {
    alert("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
    return;
  }

  try {
    await loadAdminPanelData();
    alert(
      `‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!\n–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: ${adminPanelData.scheduleClasses.length}\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`
    );
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", error);
    alert("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: " + error.message);
  }
}

async function loadAdminPanelData() {
  if (!supabase) {
    adminPanelData = {
      scheduleClasses: [],
      classTypes: [],
      locations: [],
      teachers: [],
    };
    return;
  }

  try {
    const { data: scheduleClasses, error } = await supabase
      .from("schedule_classes")
      .select("*")
      .order("day_of_week", { ascending: true })
      .order("time_slot", { ascending: true });

    if (error) throw error;

    adminPanelData.scheduleClasses = scheduleClasses || [];
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –¥–∞–Ω–Ω—ã—Ö:", error);
    adminPanelData = {
      scheduleClasses: [],
      classTypes: [],
      locations: [],
      teachers: [],
    };
  }
}

// === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ò–ù–¢–ï–†–§–ï–ô–° ===

function updateStats() {
  let totalClasses = 0;

  Object.keys(scheduleData).forEach((time) => {
    Object.keys(scheduleData[time]).forEach((day) => {
      totalClasses += scheduleData[time][day].filter((cls) =>
        matchesFilters(cls, time, parseInt(day))
      ).length;
    });
  });

  let activeFiltersCount = 0;
  if (activeFilters.showMyGroupsOnly) activeFiltersCount++;
  activeFiltersCount += activeFilters.teachers.size;
  activeFiltersCount += activeFilters.levels.size;
  activeFiltersCount += activeFilters.types.size;
  activeFiltersCount += activeFilters.locations.size;

  let userInfo = "";
  if (currentUser && userProfile) {
    userInfo = ` | <span style="color: #27ae60;">üë§ ${
      userProfile.full_name || currentUser.email
    }</span>`;

    if (isAdmin()) {
      userInfo += ` <span class="admin-indicator">–ê–î–ú–ò–ù</span>`;
    }
  }

  document.getElementById("stats").innerHTML = `
    <span style="color: #f39c12;">üìä –ü–æ–∫–∞–∑–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–π:</span> <strong>${totalClasses}</strong> | 
    <span style="color: #f39c12;">üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</span> <strong>${activeFiltersCount}</strong>${userInfo}
  `;
}

function updateFilterFab() {
  const tagsContainer = document.getElementById("filter-fab-tags");
  const fab = document.getElementById("filter-fab");

  const activeTags = [];

  if (activeFilters.showMyGroupsOnly) {
    activeTags.push({ type: "myGroups", value: "–ú–æ–∏ –≥—Ä—É–ø–ø—ã" });
  }

  activeFilters.teachers.forEach((teacher) => {
    activeTags.push({ type: "teacher", value: teacher.split(" ")[0] });
  });

  activeFilters.levels.forEach((level) => {
    activeTags.push({ type: "level", value: level });
  });

  activeFilters.types.forEach((type) => {
    const displayName = typeNames[type] || type;
    activeTags.push({ type: "type", value: displayName.split(" ")[0] });
  });

  activeFilters.locations.forEach((location) => {
    const displayName = locationNames[location] || location;
    activeTags.push({
      type: "location",
      value: displayName.includes("8 –ú–∞—Ä—Ç–∞") ? "8 –ú–∞—Ä—Ç–∞" : "–ö–∞—Ä–ª–∞ –õ.",
    });
  });

  tagsContainer.innerHTML = "";

  const maxTags = 4;
  const displayTags = activeTags.slice(0, maxTags);

  displayTags.forEach((tag) => {
    const tagElement = document.createElement("span");
    tagElement.className = "filter-fab-tag";
    tagElement.textContent = tag.value;
    tagsContainer.appendChild(tagElement);
  });

  if (activeTags.length > maxTags) {
    const moreTag = document.createElement("span");
    moreTag.className = "filter-fab-tag";
    moreTag.textContent = `+${activeTags.length - maxTags}`;
    tagsContainer.appendChild(moreTag);
  }

  if (activeTags.length > 0) {
    fab.style.minWidth = "120px";
  } else {
    fab.style.minWidth = "60px";
  }
}

function toggleMobileDay(dayIndex) {
  if (window.innerWidth <= 768) {
    const dayCard = document.querySelector(`[data-day-index="${dayIndex}"]`);
    const content = dayCard.querySelector(".mobile-day-content");

    if (collapsedMobileDays.has(dayIndex)) {
      content.style.display = "block";
      collapsedMobileDays.delete(dayIndex);
    } else {
      content.style.display = "none";
      collapsedMobileDays.add(dayIndex);
    }
  }
}

// === –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û ===

function showClassDetails(name, level, teacher, location) {
  const locationName =
    location === "8 –º–∞—Ä—Ç–∞"
      ? "—É–ª. 8 –ú–∞—Ä—Ç–∞, 8–î (–¢–¶ –ú—ã—Ç–Ω—ã–π –î–≤–æ—Ä, 2 —ç—Ç–∞–∂)"
      : "—É–ª. –ö–∞—Ä–ª–∞ –õ–∏–±–∫–Ω–µ—Ö—Ç–∞, 22 (–ë–¶ –ö–æ–Ω—Å—É–ª, 2 —ç—Ç–∞–∂)";

  document.getElementById("modal-title").textContent = name;
  document.getElementById("modal-body").innerHTML = `
    <div class="detail-row">
      <div class="detail-label">–£—Ä–æ–≤–µ–Ω—å:</div>
      <div>${level}</div>
    </div>
    <div class="detail-row">
      <div class="detail-label">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</div>
      <div>${teacher}</div>
    </div>
    <div class="detail-row">
      <div class="detail-label">–õ–æ–∫–∞—Ü–∏—è:</div>
      <div>${locationName}</div>
    </div>
  `;

  document.getElementById("class-modal").style.display = "block";
}

function closeModal() {
  document.getElementById("class-modal").style.display = "none";
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

function createFilterButtons(container, items, filterType) {
  container.innerHTML = "";
  [...items].sort().forEach((item) => {
    const button = document.createElement("button");
    button.className = "filter-button";
    button.textContent = item;
    button.onclick = () => toggleFilter(filterType, item, button);
    container.appendChild(button);
  });
}

async function initializeApp() {
  console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MaxDance v2.0...");

  // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  let attempts = 0;
  while (typeof currentUser === "undefined" && attempts < 50) {
    await new Promise((resolve) => setTimeout(resolve, 100));
    attempts++;
  }

  await loadData();

  const { teachers, levels, types, locations } = extractAllData();

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
  createFilterButtons(
    document.getElementById("teacherFilters"),
    teachers,
    "teachers"
  );

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —É—Ä–æ–≤–Ω–µ–π —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
  const levelContainer = document.getElementById("levelFilters");
  levelContainer.innerHTML = "";
  const fixedOrder = [
    "–ù–∞–±–æ—Ä",
    "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
    "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
    "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
    "–î–µ—Ç–∏",
  ];

  fixedOrder.forEach((level) => {
    if (levels.has(level)) {
      const button = document.createElement("button");
      button.className = "filter-button";
      button.textContent = level;
      button.onclick = () => toggleFilter("levels", level, button);
      levelContainer.appendChild(button);
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ç–∏–ø–æ–≤ (—Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏)
  const typeButtons = document.getElementById("typeFilters");
  typeButtons.innerHTML = "";
  const filteredTypes = [...types].filter(
    (type) => !excludedTypes.includes(type)
  );

  filteredTypes.sort().forEach((type) => {
    const button = document.createElement("button");
    button.className = "filter-button";
    button.textContent = typeNames[type] || type;
    button.onclick = () => toggleFilter("types", type, button);
    typeButtons.appendChild(button);
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ª–æ–∫–∞—Ü–∏–π
  const locationButtons = document.getElementById("locationFilters");
  locationButtons.innerHTML = "";
  [...locations].sort().forEach((location) => {
    const button = document.createElement("button");
    button.className = "filter-button";
    button.textContent = locationNames[location] || location;
    button.onclick = () => toggleFilter("locations", location, button);
    locationButtons.appendChild(button);
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ "–ú–æ–∏ –≥—Ä—É–ø–ø—ã"
  createMyGroupsControls();

  // –í—Å–µ —Å–µ–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–≤–µ—Ä–Ω—É—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫—Ä–æ–º–µ "–ú–æ–∏ –≥—Ä—É–ø–ø—ã"
  ["teacherFilters", "levelFilters", "typeFilters", "locationFilters"].forEach(
    (groupId) => {
      const options = document.getElementById(groupId);
      const toggle = document.querySelector(
        `[onclick="toggleFilterGroup('${groupId}')"] .filter-toggle`
      );
      if (options && toggle) {
        options.classList.add("collapsed");
        toggle.classList.add("collapsed");
      }
    }
  );

  openFilterGroups.add("myGroupsFilters");

  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
  renderFilteredSchedule();
  updateStats();
  updateFilterFab();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  window.addEventListener("resize", renderFilteredSchedule);

  console.log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");

  if (currentUser) {
    const status = isAdmin() ? "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    console.log(
      `üë§ ${status}: ${userProfile?.full_name || currentUser.email}, –≥—Ä—É–ø–ø: ${
        myGroups.size
      }`
    );
  } else {
    console.log(`üìÇ –ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º, –≥—Ä—É–ø–ø –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${myGroups.size}`);
  }
}

// === –°–û–ë–´–¢–ò–Ø ===

window.onclick = function (event) {
  const modal = document.getElementById("class-modal");
  if (event.target === modal) {
    closeModal();
  }
};

document.addEventListener("keydown", function (event) {
  if (event.key === "Escape") {
    closeModal();
    closeFilters();
  }
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener("DOMContentLoaded", initializeApp);
