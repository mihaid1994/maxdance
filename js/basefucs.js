// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π basefucs.js —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
// –§–∏–Ω–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è basefucs.js

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
let scheduleData = {};
let timeSlots = [];
let dayNames = [];
let typeNames = {};
let locationNames = {};
const daysCount = 7;

// –ú–∞—Å—Å–∏–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–∏–π (–Ω–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö)
const excludedTypes = [
  "bachata-advanced",
  "bachata-continuing",
  "bachata-general",
];

// –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —É—Ä–æ–≤–Ω–µ–π (–Ω–µ–≤–∏–¥–∏–º—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
const levelMapping = {
  –Ω–∞–±–æ—Ä: "–ù–∞–±–æ—Ä",
  "–∏–¥–µ—Ç –Ω–∞–±–æ—Ä": "–ù–∞–±–æ—Ä",
  0: "–ù–∞–±–æ—Ä",
  –æ–±—â–∏–π: "–ù–∞–±–æ—Ä",
  "–æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å": "–ù–∞–±–æ—Ä",

  "0,2": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  "0,3": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  "0,4": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  "0,5": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  –Ω–∞—á–∏–Ω–∞—é—â–∏–µ: "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",
  "–Ω–∞—á–∏–Ω–∞—é—â–∞—è –≥—Ä—É–ø–ø–∞": "–ù–∞—á–∏–Ω–∞—é—â–∏–µ",

  "0,6": "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
  "0,7": "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
  "0,8": "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
  "0,8-1": "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",
  –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ: "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ",

  1: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  "1-2": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥—Ä—É–ø–ø–∞": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  –ø—Ä–æ—Ñ–∏: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  —Ö–æ—Ä–µ–æ: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  –∫—É—Ä—Å: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",
  "–±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ",

  –¥–µ—Ç—Å–∫–∞—è: "–î–µ—Ç–∏",
  –¥–µ—Ç–∏: "–î–µ—Ç–∏",
  "3-5 –ª–µ—Ç": "–î–µ—Ç–∏",
  "7-10 –ª–µ—Ç": "–î–µ—Ç–∏",
};

let activeFilters = {
  teachers: new Set(),
  levels: new Set(),
  types: new Set(),
  locations: new Set(),
  showMyGroupsOnly: false,
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ "–ú–æ–∏ –≥—Ä—É–ø–ø—ã"
let myGroups = new Set();
let isSelectMode = false;
let tempSelectedGroups = new Set();

let openFilterGroups = new Set();
let collapsedMobileDays = new Set();

// === –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===

async function loadData() {
  try {
    console.log("üì° –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...");

    let data;
    try {
      data = await loadScheduleFromDatabase();
      console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
    } catch (dbError) {
      console.warn(
        "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –±–∞–∑—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫ JSON:",
        dbError
      );
      const response = await fetch("./data/data.json");
      data = await response.json();
      console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ JSON —Ñ–∞–π–ª–∞");
    }

    scheduleData = data.schedule;
    timeSlots = data.timeSlots;
    dayNames = data.dayNames;
    typeNames = data.typeNames;
    locationNames = data.locationNames;

    if (currentUser) {
      console.log("üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
      try {
        const userGroups = await getUserSavedGroups();
        myGroups = new Set(userGroups);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${myGroups.size} –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
      } catch (error) {
        console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        myGroups = new Set();
      }
    } else {
      if (data.myGroups) {
        myGroups = new Set(data.myGroups);
        activeFilters.showMyGroupsOnly = true;
      } else {
        myGroups = new Set();
      }
      console.log("üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã:", myGroups.size);
    }

    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    scheduleData = {};
    timeSlots = [];
    dayNames = [];
    typeNames = {};
    locationNames = {};
    myGroups = new Set();
  }
}

async function reloadScheduleWithAuth() {
  await loadData();
  createMyGroupsControls();
  renderFilteredSchedule();
  updateStats();
  updateFilterFab();
}

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ù–Ø–¢–ò–ô ===

function getClassKey(classItem, time, day) {
  if (classItem.id) {
    return `db_${classItem.id}`;
  }
  return `${classItem.name}_${classItem.level}_${classItem.teacher}_${classItem.location}_${time}_${day}`;
}

function createClassItem(classData, time, day) {
  const locationClass =
    classData.location === "8 –º–∞—Ä—Ç–∞" ? "loc-8marta" : "loc-libknehta";
  const locationText = classData.location === "8 –º–∞—Ä—Ç–∞" ? "8–ú" : "–ö–õ";

  const classKey = getClassKey(classData, time, day);
  const isMyGroup = myGroups.has(classKey);

  let additionalClasses = "";
  let showStar = false;

  if (isSelectMode) {
    if (tempSelectedGroups.has(classKey)) {
      additionalClasses += " selected-group";
    }
  } else {
    if (isMyGroup) {
      additionalClasses += " my-group";
      showStar = true;
    }
  }

  let actionButtons = "";
  if (currentUser && !isSelectMode) {
    const safeData = JSON.stringify(classData).replace(/"/g, "&quot;");
    actionButtons = `
      <div class="class-actions">
        <button class="add-to-personal-btn"
                onclick="event.stopPropagation(); addToPersonalSchedule(${safeData}, '${time}', ${day})"
                title="–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ">‚ûï</button>
      </div>
    `;
  }

  let adminButtons = "";
  if (isAdmin() && !isSelectMode && classData.id) {
    adminButtons = `
      <div class="admin-actions">
        <button class="edit-class-btn" onclick="event.stopPropagation(); editScheduleClassQuick(${classData.id})" title="–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ">‚úèÔ∏è</button>
        <button class="delete-class-btn" onclick="event.stopPropagation(); deleteScheduleClassQuick(${classData.id})" title="–£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ">üóëÔ∏è</button>
      </div>
    `;
  }

  const clickHandler = isSelectMode
    ? `handleMyGroupsSelection(${JSON.stringify(classData).replace(
        /"/g,
        "&quot;"
      )}, '${time}', ${day}, this)`
    : `showClassDetails('${classData.name}', '${classData.level}', '${classData.teacher}', '${classData.location}')`;

  return `
    <div class="class-item ${
      classData.type
    }${additionalClasses}" onclick="${clickHandler}">
      ${showStar ? '<div class="my-group-star">‚≠ê</div>' : ""}
      <div class="class-location ${locationClass}">${locationText}</div>
      <div class="class-name">${classData.name}</div>
      <div class="class-level">${classData.level}</div>
      <div class="class-teacher">${classData.teacher}</div>
      ${actionButtons}
      ${adminButtons}
    </div>
  `;
}

// === –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï ===

async function addToPersonalSchedule(classData, time, day) {
  if (!currentUser) {
    showNotification(
      "–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
      "error"
    );
    return;
  }
  try {
    const personalClasses = await getUserPersonalClasses();
    const duplicate = personalClasses.find(
      (pc) =>
        pc.name === classData.name &&
        pc.day_of_week === day &&
        pc.time_slot === time &&
        pc.teacher === classData.teacher
    );
    if (duplicate) {
      showNotification(`–ó–∞–Ω—è—Ç–∏–µ "${classData.name}" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ`, "info");
      return;
    }
    await addClassToPersonal(classData, time, day);
    showNotification(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ "${classData.name}"`, "success");
    await reloadScheduleWithAuth();
  } catch (error) {
    console.error(error);
    showNotification(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è: " + error.message,
      "error"
    );
  }
}

function createMyGroupsControls() {
  const container = document.getElementById("myGroupsFilters");
  container.innerHTML = "";

  const toggleButton = document.createElement("button");
  toggleButton.id = "my-groups-toggle";
  toggleButton.className = "filter-button my-groups-main-toggle";
  const groupsText =
    currentUser && userProfile
      ? `‚≠ê –ú–æ–∏ –≥—Ä—É–ø–ø—ã (${myGroups.size})`
      : `‚≠ê –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–∏ –≥—Ä—É–ø–ø—ã (${myGroups.size})`;
  toggleButton.textContent = groupsText;
  if (activeFilters.showMyGroupsOnly) toggleButton.classList.add("active");
  toggleButton.onclick = toggleMyGroupsFilter;
  container.appendChild(toggleButton);

  if (currentUser) {
    const psBtn = document.createElement("button");
    psBtn.className = "filter-button personal-schedule-btn";
    psBtn.textContent = "üìÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ";
    psBtn.onclick = showPersonalSchedule;
    container.appendChild(psBtn);
  }

  if (isAdmin()) {
    const apBtn = document.createElement("button");
    apBtn.className = "filter-button admin-panel-btn";
    apBtn.textContent = "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å";
    apBtn.onclick = showAdminPanel;
    container.appendChild(apBtn);
  }

  if (myGroups.size === 0) {
    const message = document.createElement("div");
    message.className = "no-groups-message";
    message.textContent = currentUser
      ? "–ì—Ä—É–ø–ø—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
      : "–ì—Ä—É–ø–ø—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.";
    container.appendChild(message);
  }

  if (isSelectMode) showMyGroupsInstructions();
}

async function showPersonalSchedule() {
  if (!currentUser) {
    showNotification("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞", "error");
    return;
  }
  try {
    const personalClasses = await getUserPersonalClasses();
    personalScheduleData = organizePersonalSchedule(personalClasses);
    createPersonalScheduleModal();
    isPersonalScheduleOpen = true;
    console.log("üìÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ");
  } catch (error) {
    console.error(error);
    showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "error");
  }
}

function organizePersonalSchedule(classes) {
  const organized = {};
  classes.forEach((c) => {
    const { time_slot: time, day_of_week: day } = c;
    if (!organized[time]) organized[time] = {};
    if (!organized[time][day]) organized[time][day] = [];
    organized[time][day].push(c);
  });
  return organized;
}

function createPersonalScheduleModal() {
  const existing = document.getElementById("personal-schedule-modal");
  if (existing) existing.remove();
  const modal = document.createElement("div");
  modal.id = "personal-schedule-modal";
  modal.className = "personal-schedule-modal";
  modal.innerHTML = `
    <div class="personal-schedule-content">
      <div class="personal-schedule-header">
        <h2>üìÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h2>
        <button class="personal-schedule-close" onclick="closePersonalSchedule()">√ó</button>
      </div>
      <div class="personal-schedule-tabs">
        <button class="personal-tab active" data-tab="schedule" onclick="switchPersonalTab('schedule')">üìã –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</button>
        <button class="personal-tab" data-tab="add" onclick="switchPersonalTab('add')">‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ</button>
      </div>
      <div class="personal-schedule-body">
        <div id="personal-tab-schedule" class="personal-tab-content active">${renderPersonalScheduleGrid()}</div>
        <div id="personal-tab-add" class="personal-tab-content">${renderAddClassForm()}</div>
      </div>
    </div>
  `;
  document.body.appendChild(modal);
  setTimeout(() => modal.classList.add("active"), 10);
}

function renderPersonalScheduleGrid() {
  if (Object.keys(personalScheduleData).length === 0) {
    return `
      <div class="personal-schedule-empty">
        <div class="empty-icon">üìÖ</div>
        <h3>–í–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ</h3>
        <p>–î–æ–±–∞–≤—å—Ç–µ –∑–∞–Ω—è—Ç–∏—è –∏–∑ –æ–±—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ</p>
        <button class="personal-btn personal-btn-primary" onclick="switchPersonalTab('add')">‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ</button>
      </div>
    `;
  }

  const allTimeSlots = [
    ...new Set([...Object.keys(personalScheduleData), ...timeSlots]),
  ].sort((a, b) => {
    const [ha, ma] = a.split(":").map(Number);
    const [hb, mb] = b.split(":").map(Number);
    return ha * 60 + ma - (hb * 60 + mb);
  });

  let html = `
    <div class="personal-schedule-grid">
      <div class="personal-schedule-table">
        <table>
          <thead>
            <tr>
              <th>–í—Ä–µ–º—è</th>
              ${dayNames.map((day) => `<th>${day}</th>`).join("")}
            </tr>
          </thead>
          <tbody>
  `;
  allTimeSlots.forEach((time) => {
    html += `<tr><td class="personal-time-cell">${time}</td>`;
    for (let d = 0; d < daysCount; d++) {
      html += `<td class="personal-class-cell">`;
      if (personalScheduleData[time]?.[d]) {
        html += personalScheduleData[time][d]
          .map(renderPersonalClassItem)
          .join("");
      } else {
        html += `<div class="personal-empty-cell">‚Äî</div>`;
      }
      html += `</td>`;
    }
    html += `</tr>`;
  });
  html += `
          </tbody>
        </table>
      </div>
      <div class="personal-schedule-stats">
        <div class="personal-stat">
          <span class="personal-stat-number">${getTotalPersonalClasses()}</span>
          <span class="personal-stat-label">–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π</span>
        </div>
        <div class="personal-stat">
          <span class="personal-stat-number">${getUniquePersonalDays()}</span>
          <span class="personal-stat-label">–î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é</span>
        </div>
        <div class="personal-stat">
          <span class="personal-stat-number">${getPersonalHoursPerWeek()}</span>
          <span class="personal-stat-label">–ß–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é</span>
        </div>
      </div>
    </div>
  `;
  return html;
}

function renderPersonalClassItem(classItem) {
  return `
    <div class="personal-class-item ${classItem.type || "personal"}">
      <div class="personal-class-name">${classItem.name}</div>
      <div class="personal-class-level">${classItem.level}</div>
      <div class="personal-class-teacher">${classItem.teacher}</div>
      ${
        classItem.location
          ? `<div class="personal-class-location">${classItem.location}</div>`
          : ""
      }
      <div class="personal-class-actions">
        <button class="personal-action-btn edit" onclick="editPersonalClass(${
          classItem.id
        })" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
        <button class="personal-action-btn delete" onclick="deletePersonalClass(${
          classItem.id
        })" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
      </div>
    </div>
  `;
}

function renderAddClassForm() {
  const isEditing = editingPersonalClass !== null;
  const data = isEditing
    ? editingPersonalClass
    : {
        name: "",
        level: "",
        teacher: "",
        location: "",
        day_of_week: 0,
        time_slot: "19:00",
        type: "personal",
      };
  return `
    <div class="personal-add-form">
      <h3>${
        isEditing ? "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ" : "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ"
      }</h3>
      <form id="personal-class-form" onsubmit="savePersonalClass(event)">
        <div class="personal-form-row">
          <div class="personal-form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è *</label>
            <input type="text" id="personal-name" value="${data.name}" required>
          </div>
          <div class="personal-form-group">
            <label>–£—Ä–æ–≤–µ–Ω—å</label>
            <input type="text" id="personal-level" value="${data.level}">
          </div>
        </div>
        <div class="personal-form-row">
          <div class="personal-form-group">
            <label>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</label>
            <input type="text" id="personal-teacher" value="${data.teacher}">
          </div>
          <div class="personal-form-group">
            <label>–õ–æ–∫–∞—Ü–∏—è</label>
            <select id="personal-location">
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</option>
              <option value="8 –º–∞—Ä—Ç–∞" ${
                data.location === "8 –º–∞—Ä—Ç–∞" ? "selected" : ""
              }>—É–ª. 8 –ú–∞—Ä—Ç–∞</option>
              <option value="–ª–∏–±–∫–Ω–µ—Ö—Ç–∞" ${
                data.location === "–ª–∏–±–∫–Ω–µ—Ö—Ç–∞" ? "selected" : ""
              }>—É–ª. –ö.–õ–∏–±–∫–Ω–µ—Ö—Ç–∞</option>
              <option value="–¥–æ–º–∞" ${
                data.location === "–¥–æ–º–∞" ? "selected" : ""
              }>–î–æ–º–∞ (–æ–Ω–ª–∞–π–Ω)</option>
              <option value="–¥—Ä—É–≥–æ–µ" ${
                data.location === "–¥—Ä—É–≥–æ–µ" ? "selected" : ""
              }>–î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ</option>
            </select>
          </div>
        </div>
        <div class="personal-form-row">
          <div class="personal-form-group">
            <label>–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ *</label>
            <select id="personal-day" required>
              ${dayNames
                .map(
                  (d, i) =>
                    `<option value="${i}" ${
                      data.day_of_week == i ? "selected" : ""
                    }>${d}</option>`
                )
                .join("")}
            </select>
          </div>
          <div class="personal-form-group">
            <label>–í—Ä–µ–º—è *</label>
            <select id="personal-time" required>${generateTimeOptions(
              data.time_slot
            )}</select>
          </div>
        </div>
        <div class="personal-form-group">
          <label>–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è</label>
          <select id="personal-type">
            <option value="personal" ${
              data.type === "personal" ? "selected" : ""
            }>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ</option>
            <option value="group" ${
              data.type === "group" ? "selected" : ""
            }>–ì—Ä—É–ø–ø–æ–≤–æ–µ</option>
            <option value="online" ${
              data.type === "online" ? "selected" : ""
            }>–û–Ω–ª–∞–π–Ω</option>
            <option value="practice" ${
              data.type === "practice" ? "selected" : ""
            }>–ü—Ä–∞–∫—Ç–∏–∫–∞</option>
          </select>
        </div>
        <div class="personal-form-actions">
          <button type="button" onclick="cancelEditPersonalClass()">–û—Ç–º–µ–Ω–∞</button>
          <button type="submit">${
            isEditing ? "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å" : "‚ûï –î–æ–±–∞–≤–∏—Ç—å"
          }</button>
        </div>
      </form>
    </div>
  `;
}

function generateTimeOptions(selected = "") {
  let opts = "";
  for (let h = 8; h <= 23; h++) {
    for (let m of ["00", "30"]) {
      const t = `${h.toString().padStart(2, "0")}:${m}`;
      opts += `<option value="${t}" ${
        t === selected ? "selected" : ""
      }>${t}</option>`;
    }
  }
  return opts;
}

function switchPersonalTab(tab) {
  document
    .querySelectorAll(".personal-tab")
    .forEach((t) => t.classList.remove("active"));
  document.querySelector(`[data-tab="${tab}"]`).classList.add("active");
  document
    .querySelectorAll(".personal-tab-content")
    .forEach((c) => c.classList.remove("active"));
  document.getElementById(`personal-tab-${tab}`).classList.add("active");
  if (tab === "add" && !editingPersonalClass) updateAddForm();
}

async function savePersonalClass(e) {
  e.preventDefault();
  const formData = {
    name: document.getElementById("personal-name").value.trim(),
    level: document.getElementById("personal-level").value.trim(),
    teacher: document.getElementById("personal-teacher").value.trim(),
    location: document.getElementById("personal-location").value,
    day_of_week: +document.getElementById("personal-day").value,
    time_slot: document.getElementById("personal-time").value,
    type: document.getElementById("personal-type").value,
  };
  if (!formData.name)
    return showNotification("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è", "error");
  try {
    if (editingPersonalClass) {
      await updatePersonalClass(editingPersonalClass.id, formData);
      showNotification("–ó–∞–Ω—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", "success");
      editingPersonalClass = null;
    } else {
      await createPersonalClass(formData);
      showNotification("–ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", "success");
    }
    const classes = await getUserPersonalClasses();
    personalScheduleData = organizePersonalSchedule(classes);
    document.getElementById("personal-tab-schedule").innerHTML =
      renderPersonalScheduleGrid();
    document.getElementById("personal-class-form").reset();
    switchPersonalTab("schedule");
  } catch (error) {
    console.error(error);
    showNotification("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è: " + error.message, "error");
  }
}

async function editPersonalClass(id) {
  try {
    const classes = await getUserPersonalClasses();
    editingPersonalClass = classes.find((c) => c.id === id);
    if (!editingPersonalClass)
      return showNotification("–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "error");
    switchPersonalTab("add");
    updateAddForm();
  } catch (error) {
    console.error(error);
    showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–Ω—è—Ç–∏—è", "error");
  }
}

async function deletePersonalClass(id) {
  if (!confirm("–£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ?")) return;
  try {
    await window.deletePersonalClass(id);
    showNotification("–ó–∞–Ω—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ", "success");
    const classes = await getUserPersonalClasses();
    personalScheduleData = organizePersonalSchedule(classes);
    document.getElementById("personal-tab-schedule").innerHTML =
      renderPersonalScheduleGrid();
  } catch (error) {
    console.error(error);
    showNotification("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è: " + error.message, "error");
  }
}

function cancelEditPersonalClass() {
  editingPersonalClass = null;
  switchPersonalTab("schedule");
}

function updateAddForm() {
  document.getElementById("personal-tab-add").innerHTML = renderAddClassForm();
}

function closePersonalSchedule() {
  const modal = document.getElementById("personal-schedule-modal");
  if (modal) {
    modal.classList.remove("active");
    setTimeout(() => {
      modal.remove();
      isPersonalScheduleOpen = false;
      editingPersonalClass = null;
    }, 300);
  }
}

function getTotalPersonalClasses() {
  return Object.values(personalScheduleData)
    .flatMap((td) => Object.values(td))
    .flat().length;
}

function getUniquePersonalDays() {
  return new Set(
    Object.values(personalScheduleData).flatMap((td) => Object.keys(td))
  ).size;
}

function getPersonalHoursPerWeek() {
  return getTotalPersonalClasses();
}

// === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===

function showNotification(message, type = "info", duration = 3000) {
  document.querySelectorAll(".notification").forEach((n) => n.remove());
  const notif = document.createElement("div");
  notif.className = `notification ${type}`;
  notif.textContent = message;
  document.body.appendChild(notif);
  setTimeout(() => {
    notif.style.animation = "slideOutRight 0.3s ease-out";
    setTimeout(() => notif.remove(), 300);
  }, duration);
}

// === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===

let adminPanelData = {
  scheduleClasses: [],
  classTypes: [],
  locations: [],
  teachers: [],
};
let isAdminPanelOpen = false;
let editingAdminItem = null;
let currentAdminTab = "schedule";

async function showAdminPanel() {
  if (!isAdmin()) return showNotification("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error");
  try {
    await loadAdminPanelData();
    createAdminPanelModal();
    isAdminPanelOpen = true;
    console.log("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞");
  } catch (error) {
    console.error(error);
    showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", "error");
  }
}

async function loadAdminPanelData() {
  try {
    const { data: scheduleClasses, error: scheduleError } = await supabase
      .from("schedule_classes")
      .select(
        `*, created_by_profile:user_profiles!schedule_classes_created_by_fkey(full_name), updated_by_profile:user_profiles!schedule_classes_updated_by_fkey(full_name)`
      )
      .order("day_of_week", { ascending: true })
      .order("time_slot", { ascending: true });
    if (scheduleError) throw scheduleError;
    const ref = await loadReferenceData();
    adminPanelData = {
      scheduleClasses: scheduleClasses || [],
      classTypes: ref.classTypes || [],
      locations: ref.locations || [],
      teachers: ref.teachers || [],
    };
    console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
  } catch (error) {
    console.error(error);
    throw error;
  }
}

function createAdminPanelModal() {
  const existing = document.getElementById("admin-panel-modal");
  if (existing) existing.remove();
  const modal = document.createElement("div");
  modal.id = "admin-panel-modal";
  modal.className = "admin-panel-modal";
  modal.innerHTML = `
    <div class="admin-panel-content">
      <div class="admin-panel-header">
        <h2>‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
        <div class="admin-panel-user">
          <span class="admin-indicator">–ê–î–ú–ò–ù</span>
          <span class="admin-user-name">${
            userProfile?.full_name || currentUser?.email
          }</span>
        </div>
        <button class="admin-panel-close" onclick="closeAdminPanel()">√ó</button>
      </div>
      <div class="admin-panel-tabs">
        <button class="admin-tab active" data-tab="schedule" onclick="switchAdminTab('schedule')">üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</button>
        <button class="admin-tab" data-tab="references" onclick="switchAdminTab('references')">üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏</button>
        <button class="admin-tab" data-tab="analytics" onclick="switchAdminTab('analytics')">üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</button>
        <button class="admin-tab" data-tab="settings" onclick="switchAdminTab('settings')">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</button>
      </div>
      <div class="admin-panel-body">
        <div id="admin-tab-schedule" class="admin-tab-content active">${renderScheduleManagement()}</div>
        <div id="admin-tab-references" class="admin-tab-content">${renderReferencesManagement()}</div>
        <div id="admin-tab-analytics" class="admin-tab-content">${renderAnalytics()}</div>
        <div id="admin-tab-settings" class="admin-tab-content">${renderSettings()}</div>
      </div>
    </div>
  `;
  document.body.appendChild(modal);
  setTimeout(() => modal.classList.add("active"), 10);
}

// (–∑–¥–µ—Å—å –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è renderScheduleManagement, renderReferencesManagement, renderAnalytics, renderSettings,
//  –∞ —Ç–∞–∫–∂–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–∏–º–µ—Ä—É –≤—ã—à–µ ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)

function closeAdminPanel() {
  const modal = document.getElementById("admin-panel-modal");
  if (modal) {
    modal.classList.remove("active");
    setTimeout(() => {
      modal.remove();
      isAdminPanelOpen = false;
      editingAdminItem = null;
    }, 300);
  }
}

function switchAdminTab(tab) {
  currentAdminTab = tab;
  document
    .querySelectorAll(".admin-tab")
    .forEach((t) => t.classList.remove("active"));
  document.querySelector(`[data-tab="${tab}"]`).classList.add("active");
  document
    .querySelectorAll(".admin-tab-content")
    .forEach((c) => c.classList.remove("active"));
  document.getElementById(`admin-tab-${tab}`).classList.add("active");
}

// === –§–ò–ù–ê–õ–¨–ù–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø ===

function updateStats() {
  let totalClasses = 0;
  Object.keys(scheduleData).forEach((time) =>
    Object.keys(scheduleData[time]).forEach(
      (day) =>
        (totalClasses += scheduleData[time][day].filter((cls) =>
          matchesFilters(cls, time, +day)
        ).length)
    )
  );

  let activeCount = activeFilters.showMyGroupsOnly ? 1 : 0;
  activeCount += activeFilters.teachers.size;
  activeCount += activeFilters.levels.size;
  activeCount += activeFilters.types.size;
  activeCount += activeFilters.locations.size;

  let userInfo = "";
  if (currentUser && userProfile) {
    userInfo = ` | <span style="color: #27ae60;">üë§ ${
      userProfile.full_name || currentUser.email
    }</span>`;
    if (isAdmin()) {
      userInfo += ` <span class="admin-indicator">–ê–î–ú–ò–ù</span>`;
    }
  }

  document.getElementById("stats").innerHTML = `
    <span style="color: #f39c12;">üìä –ü–æ–∫–∞–∑–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–π:</span> <strong>${totalClasses}</strong> |
    <span style="color: #f39c12;">üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</span> <strong>${activeCount}</strong>${userInfo}
  `;
}

async function initializeApp() {
  console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è MaxDance v2.0...");
  let initialized = false,
    attempts = 0;
  while (!initialized && attempts < 50) {
    if (typeof currentUser !== "undefined") initialized = true;
    else {
      await new Promise((r) => setTimeout(r, 100));
      attempts++;
    }
  }
  await loadData();
  const { teachers, levels, types, locations } = extractAllData();
  createFilterButtons(
    document.getElementById("teacherFilters"),
    teachers,
    "teachers"
  );
  // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤, —Ä–µ–Ω–¥–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ —Ç.–¥.
  renderFilteredSchedule();
  updateStats();
  updateFilterFab();
  window.addEventListener("resize", renderFilteredSchedule);
  console.log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MaxDance –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  if (isAdmin() && myGroups.size === 0) {
    setTimeout(
      () =>
        showNotification(
          "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å MaxDance!",
          "info",
          5000
        ),
      2000
    );
  }
}

document.addEventListener("DOMContentLoaded", initializeApp);
