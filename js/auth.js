// js/auth.js - Supabase –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞ —Å –¢–í–û–ò–ú–ò –¥–∞–Ω–Ω—ã–º–∏
const supabaseUrl = "https://rxwtfqnzrhzpiupkawgq.supabase.co";
const supabaseKey =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4d3RmcW56cmh6cGl1cGthd2dxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEzNDUzMDUsImV4cCI6MjA2NjkyMTMwNX0.AP3S-aRZDm2XD-Ld9aSSfxtIigV8hWXC3rXb7TUwxSI";
const supabase = createClient(supabaseUrl, supabaseKey);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
let currentUser = null;
let userProfile = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function initAuth() {
  console.log("üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
  const {
    data: { session },
  } = await supabase.auth.getSession();

  if (session) {
    await handleAuthSuccess(session.user);
  }

  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  supabase.auth.onAuthStateChange(async (event, session) => {
    console.log("üîÑ Auth state changed:", event);

    if (event === "SIGNED_IN" && session) {
      await handleAuthSuccess(session.user);
    } else if (event === "SIGNED_OUT") {
      handleAuthSignOut();
    }
  });

  updateAuthUI();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function handleAuthSuccess(user) {
  console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", user.email);

  currentUser = user;

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    let { data: profile, error } = await supabase
      .from("user_profiles")
      .select("*")
      .eq("id", user.id)
      .single();

    if (error && error.code === "PGRST116") {
      // –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º
      const { data: newProfile, error: insertError } = await supabase
        .from("user_profiles")
        .insert({
          id: user.id,
          email: user.email,
          full_name:
            user.user_metadata.full_name ||
            user.user_metadata.name ||
            user.email,
          avatar_url: user.user_metadata.avatar_url,
        })
        .select()
        .single();

      if (insertError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", insertError);
      } else {
        profile = newProfile;
        console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω");
      }
    } else if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", error);
    }

    userProfile = profile;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
  }

  updateAuthUI();

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  if (typeof reloadScheduleWithAuth === "function") {
    await reloadScheduleWithAuth();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
function handleAuthSignOut() {
  console.log("üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª");
  currentUser = null;
  userProfile = null;
  updateAuthUI();

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (typeof reloadScheduleWithAuth === "function") {
    reloadScheduleWithAuth();
  }
}

// –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
async function signInWithGoogle() {
  console.log("üîë –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google...");

  try {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: "google",
      // –£–±–∏—Ä–∞–µ–º options –ø–æ–ª–Ω–æ—Å—Ç—å—é
    });

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
      alert("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google: " + error.message);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
    alert("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google");
  }
}

// –í—ã—Ö–æ–¥
async function logout() {
  console.log("üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...");

  try {
    const { error } = await supabase.auth.signOut();
    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function updateAuthUI() {
  const loginSection = document.getElementById("login-section");
  const userSection = document.getElementById("user-section");

  if (currentUser && userProfile) {
    loginSection.style.display = "none";
    userSection.style.display = "block";

    document.getElementById("user-name").textContent =
      userProfile.full_name || currentUser.email;

    const avatarImg = document.getElementById("user-avatar");
    if (userProfile.avatar_url) {
      avatarImg.src = userProfile.avatar_url;
      avatarImg.style.display = "block";
    } else {
      avatarImg.style.display = "none";
    }

    console.log("üë§ UI –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userProfile.full_name);
  } else {
    loginSection.style.display = "block";
    userSection.style.display = "none";
    console.log("üîì UI –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserSavedGroups() {
  if (!currentUser) return [];

  try {
    const { data, error } = await supabase
      .from("user_saved_groups")
      .select("group_key")
      .eq("user_id", currentUser.id);

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:", error);
      return [];
    }

    return data.map((row) => row.group_key);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:", error);
    return [];
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveUserGroups(groupKeys) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${groupKeys.length} –≥—Ä—É–ø–ø...`);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≥—Ä—É–ø–ø—ã
    const { error: deleteError } = await supabase
      .from("user_saved_groups")
      .delete()
      .eq("user_id", currentUser.id);

    if (deleteError) {
      throw deleteError;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã
    if (groupKeys.length > 0) {
      const groupsToInsert = groupKeys.map((groupKey) => ({
        user_id: currentUser.id,
        group_key: groupKey,
      }));

      const { error: insertError } = await supabase
        .from("user_saved_groups")
        .insert(groupsToInsert);

      if (insertError) {
        throw insertError;
      }
    }

    console.log("‚úÖ –ì—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø:", error);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserPersonalClasses() {
  if (!currentUser) return [];

  try {
    const { data, error } = await supabase
      .from("user_personal_classes")
      .select("*")
      .eq("user_id", currentUser.id)
      .order("day_of_week", { ascending: true })
      .order("time_slot", { ascending: true });

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π:", error);
      return [];
    }

    return data || [];
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π:", error);
    return [];
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
async function createPersonalClass(classData) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    const { data, error } = await supabase
      .from("user_personal_classes")
      .insert({
        user_id: currentUser.id,
        name: classData.name,
        level: classData.level || "",
        teacher: classData.teacher || "",
        location: classData.location || "",
        day_of_week: classData.day_of_week,
        time_slot: classData.time_slot,
        type: classData.type || "personal",
      })
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –õ–∏—á–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:", data.name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
async function updatePersonalClass(classId, classData) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    const { data, error } = await supabase
      .from("user_personal_classes")
      .update({
        name: classData.name,
        level: classData.level || "",
        teacher: classData.teacher || "",
        location: classData.location || "",
        day_of_week: classData.day_of_week,
        time_slot: classData.time_slot,
        type: classData.type || "personal",
      })
      .eq("id", classId)
      .eq("user_id", currentUser.id)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –õ–∏—á–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", data.name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
async function deletePersonalClass(classId) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    const { error } = await supabase
      .from("user_personal_classes")
      .delete()
      .eq("id", classId)
      .eq("user_id", currentUser.id);

    if (error) {
      throw error;
    }

    console.log("‚úÖ –õ–∏—á–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ");
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
function isAdmin() {
  return userProfile && userProfile.is_admin === true;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.signInWithGoogle = signInWithGoogle;
window.logout = logout;
window.currentUser = currentUser;
window.userProfile = userProfile;
window.getUserSavedGroups = getUserSavedGroups;
window.saveUserGroups = saveUserGroups;
window.getUserPersonalClasses = getUserPersonalClasses;
window.createPersonalClass = createPersonalClass;
window.updatePersonalClass = updatePersonalClass;
window.deletePersonalClass = deletePersonalClass;
window.isAdmin = isAdmin;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
window.supabase = supabase;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener("DOMContentLoaded", initAuth);
