// js/auth.js - Supabase –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞ —Å –¢–í–û–ò–ú–ò –¥–∞–Ω–Ω—ã–º–∏
const supabaseUrl = "https://rxwtfqnzrhzpiupkawgq.supabase.co";
const supabaseKey =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4d3RmcW56cmh6cGl1cGthd2dxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEzNDUzMDUsImV4cCI6MjA2NjkyMTMwNX0.AP3S-aRZDm2XD-Ld9aSSfxtIigV8hWXC3rXb7TUwxSI";
const supabase = createClient(supabaseUrl, supabaseKey);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
let currentUser = null;
let userProfile = null;

// === –ë–ê–ó–û–í–ê–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===
async function initAuth() {
  console.log("üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const {
    data: { session },
  } = await supabase.auth.getSession();
  if (session) {
    await handleAuthSuccess(session.user);
  }

  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤—Ö–æ–¥/–≤—ã—Ö–æ–¥)
  supabase.auth.onAuthStateChange(async (event, session) => {
    console.log("üîÑ Auth state changed:", event);

    // –ü—Ä–∏ INITIAL_SESSION –∏–ª–∏ SIGNED_IN –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if ((event === "INITIAL_SESSION" || event === "SIGNED_IN") && session) {
      await handleAuthSuccess(session.user);
    }
    // –ü—Ä–∏ SIGNED_OUT –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    else if (event === "SIGNED_OUT") {
      const {
        data: { session: currentSession },
      } = await supabase.auth.getSession();
      // –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç ‚Äî –¥–µ–ª–∞–µ–º –≤—ã—Ö–æ–¥
      if (!currentSession) {
        handleAuthSignOut();
      } else {
        console.log("‚ÑπÔ∏è IGNORE SIGNED_OUT ‚Äî –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –≤—Å—ë –µ—â—ë –∂–∏–≤–∞");
      }
    }
  });

  updateAuthUI();
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ ===
async function handleAuthSuccess(user) {
  console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", user.email);

  currentUser = user;

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å
  try {
    let { data: profile, error } = await supabase
      .from("user_profiles")
      .select("*")
      .eq("id", user.id)
      .single();

    if (error && error.code === "PGRST116") {
      const { data: newProfile, error: insertError } = await supabase
        .from("user_profiles")
        .insert({
          id: user.id,
          email: user.email,
          full_name: user.user_metadata.full_name || user.email,
          avatar_url: user.user_metadata.avatar_url,
        })
        .select()
        .single();
      if (insertError) throw insertError;
      profile = newProfile;
    } else if (error) {
      throw error;
    }

    userProfile = profile;
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", err);
    userProfile = { id: user.id, email: user.email, full_name: user.email };
  }

  // –ü—Ä–æ–±—Ä–æ—Å–∏–º –≤ –≥–ª–æ–±–∞–ª –¥–ª—è basefucs.js
  window.currentUser = currentUser;
  window.userProfile = userProfile;

  updateAuthUI();

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –∫–∞–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π
  if (typeof reloadScheduleWithAuth === "function") {
    await reloadScheduleWithAuth();
  }
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ ===
function handleAuthSignOut() {
  console.log("üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª");

  currentUser = null;
  userProfile = null;

  // –ü—Ä–æ–±—Ä–æ—Å–∏–º —Å–±—Ä–æ—Å –≤ –≥–ª–æ–±–∞–ª
  window.currentUser = null;
  window.userProfile = null;

  updateAuthUI();

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –∫–∞–∫ –≥–æ—Å—Ç—å
  if (typeof reloadScheduleWithAuth === "function") {
    reloadScheduleWithAuth();
  }
}

// –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
async function signInWithGoogle() {
  console.log("üîë –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google...");

  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π redirect URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const redirectURL =
      window.location.hostname === "localhost"
        ? "http://localhost:3000"
        : "https://maxdance.netlify.app";

    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: "google",
      options: {
        redirectTo: redirectURL,
      },
    });

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
      alert("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google: " + error.message);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
    alert("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google");
  }
}

// –í—ã—Ö–æ–¥
async function logout() {
  console.log("üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...");

  try {
    const { error } = await supabase.auth.signOut();
    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function updateAuthUI() {
  const loginSection = document.getElementById("login-section");
  const userSection = document.getElementById("user-section");

  if (currentUser && userProfile) {
    loginSection.style.display = "none";
    userSection.style.display = "block";

    document.getElementById("user-name").textContent =
      userProfile.full_name || currentUser.email;

    const avatarImg = document.getElementById("user-avatar");
    if (userProfile.avatar_url) {
      avatarImg.src = userProfile.avatar_url;
      avatarImg.style.display = "block";
    } else {
      avatarImg.style.display = "none";
    }

    console.log("üë§ UI –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userProfile.full_name);
  } else {
    loginSection.style.display = "block";
    userSection.style.display = "none";
    console.log("üîì UI –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }
}

// === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ú–ò –ì–†–£–ü–ü–ê–ú–ò ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserSavedGroups() {
  if (!currentUser) return [];

  try {
    const { data, error } = await supabase
      .from("user_saved_groups")
      .select("group_key")
      .eq("user_id", currentUser.id);

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:", error);
      return [];
    }

    return data.map((row) => row.group_key);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:", error);
    return [];
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveUserGroups(groupKeys) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${groupKeys.length} –≥—Ä—É–ø–ø...`);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≥—Ä—É–ø–ø—ã
    const { error: deleteError } = await supabase
      .from("user_saved_groups")
      .delete()
      .eq("user_id", currentUser.id);

    if (deleteError) {
      throw deleteError;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã
    if (groupKeys.length > 0) {
      const groupsToInsert = groupKeys.map((groupKey) => ({
        user_id: currentUser.id,
        group_key: groupKey,
      }));

      const { error: insertError } = await supabase
        .from("user_saved_groups")
        .insert(groupsToInsert);

      if (insertError) {
        throw insertError;
      }
    }

    console.log("‚úÖ –ì—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø:", error);
    throw error;
  }
}

// === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ú–ò –ó–ê–ù–Ø–¢–ò–Ø–ú–ò ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserPersonalClasses() {
  if (!currentUser) return [];

  try {
    const { data, error } = await supabase
      .from("user_personal_classes")
      .select("*")
      .eq("user_id", currentUser.id)
      .order("day_of_week", { ascending: true })
      .order("time_slot", { ascending: true });

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π:", error);
      return [];
    }

    return data || [];
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π:", error);
    return [];
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
async function createPersonalClass(classData) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    const { data, error } = await supabase
      .from("user_personal_classes")
      .insert({
        user_id: currentUser.id,
        name: classData.name,
        level: classData.level || "",
        teacher: classData.teacher || "",
        location: classData.location || "",
        day_of_week: classData.day_of_week,
        time_slot: classData.time_slot,
        type: classData.type || "personal",
      })
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –õ–∏—á–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:", data.name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
async function updatePersonalClass(classId, classData) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    const { data, error } = await supabase
      .from("user_personal_classes")
      .update({
        name: classData.name,
        level: classData.level || "",
        teacher: classData.teacher || "",
        location: classData.location || "",
        day_of_week: classData.day_of_week,
        time_slot: classData.time_slot,
        type: classData.type || "personal",
      })
      .eq("id", classId)
      .eq("user_id", currentUser.id)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –õ–∏—á–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", data.name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
async function deletePersonalClass(classId) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    const { error } = await supabase
      .from("user_personal_classes")
      .delete()
      .eq("id", classId)
      .eq("user_id", currentUser.id);

    if (error) {
      throw error;
    }

    console.log("‚úÖ –õ–∏—á–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ");
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –û–ë–©–ò–ú –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú ===

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function loadScheduleFromDatabase() {
  try {
    console.log("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è
    const { data: classes, error } = await supabase
      .from("schedule_classes")
      .select("*")
      .eq("is_active", true)
      .order("day_of_week")
      .order("time_slot");

    if (error) throw error;

    console.log("üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π –∏–∑ –±–∞–∑—ã:", classes?.length || 0);
    console.log("üìù –ü–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ:", classes?.[0]);

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç basefucs.js
    const schedule = {};
    const timeSlotsSet = new Set();
    const typeNamesMap = {};
    const locationNamesMap = {};

    classes?.forEach((classItem) => {
      const time = classItem.time_slot;
      const day = classItem.day_of_week;

      timeSlotsSet.add(time);

      if (!schedule[time]) {
        schedule[time] = {};
      }
      if (!schedule[time][day]) {
        schedule[time][day] = [];
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –≤ —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ JSON
      const scheduleClass = {
        id: classItem.id,
        name: classItem.name,
        level: classItem.level,
        teacher: classItem.teacher,
        type: classItem.type,
        location: classItem.location,
      };

      schedule[time][day].push(scheduleClass);

      // –°–æ–±–∏—Ä–∞–µ–º —Ç–∏–ø—ã –∏ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
      typeNamesMap[classItem.type] = classItem.type;
      locationNamesMap[classItem.location] = classItem.location;
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    const timeSlots = Array.from(timeSlotsSet).sort((a, b) => {
      const timeA = parseInt(a.split(":")[0]) * 60 + parseInt(a.split(":")[1]);
      const timeB = parseInt(b.split(":")[0]) * 60 + parseInt(b.split(":")[1]);
      return timeA - timeB;
    });

    const dayNames = [
      "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
      "–í—Ç–æ—Ä–Ω–∏–∫",
      "–°—Ä–µ–¥–∞",
      "–ß–µ—Ç–≤–µ—Ä–≥",
      "–ü—è—Ç–Ω–∏—Ü–∞",
      "–°—É–±–±–æ—Ç–∞",
      "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    ];

    const result = {
      schedule,
      timeSlots,
      dayNames,
      typeNames: typeNamesMap,
      locationNames: {
        "8 –º–∞—Ä—Ç–∞": "—É–ª. 8 –ú–∞—Ä—Ç–∞ (–ú—ã—Ç–Ω—ã–π –î–≤–æ—Ä)",
        –ª–∏–±–∫–Ω–µ—Ö—Ç–∞: "—É–ª. –ö.–õ–∏–±–∫–Ω–µ—Ö—Ç–∞ (–ö–æ–Ω—Å—É–ª)",
        ...locationNamesMap,
      },
    };

    console.log("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞:");
    console.log("- –í—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:", timeSlots.length);
    console.log("- –î–Ω–µ–π:", dayNames.length);
    console.log("- –¢–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–∏–π:", Object.keys(typeNamesMap).length);
    console.log("üìã –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:", {
      firstTimeSlot: timeSlots[0],
      firstDayClasses: schedule[timeSlots[0]]?.[0] || "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π",
    });

    return result;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏
async function loadScheduleWithPersonalClasses() {
  try {
    console.log("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏...");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    const scheduleResult = await loadScheduleFromDatabase();

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
    if (currentUser) {
      const personalClasses = await getUserPersonalClasses();
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${personalClasses.length} –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π`);

      personalClasses.forEach((personalClass) => {
        const time = personalClass.time_slot;
        const day = personalClass.day_of_week;

        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        if (!scheduleResult.timeSlots.includes(time)) {
          scheduleResult.timeSlots.push(time);
          scheduleResult.timeSlots.sort((a, b) => {
            const timeA =
              parseInt(a.split(":")[0]) * 60 + parseInt(a.split(":")[1]);
            const timeB =
              parseInt(b.split(":")[0]) * 60 + parseInt(b.split(":")[1]);
            return timeA - timeB;
          });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!scheduleResult.schedule[time]) {
          scheduleResult.schedule[time] = {};
        }
        if (!scheduleResult.schedule[time][day]) {
          scheduleResult.schedule[time][day] = [];
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        const scheduleClass = {
          id: `personal_${personalClass.id}`,
          name: personalClass.name,
          level: personalClass.level,
          teacher: personalClass.teacher,
          type: personalClass.type || "personal",
          location: personalClass.location,
          isPersonal: true,
          personalId: personalClass.id,
          userId: personalClass.user_id,
        };

        scheduleResult.schedule[time][day].push(scheduleClass);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!scheduleResult.typeNames["personal"]) {
          scheduleResult.typeNames["personal"] = "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ";
        }
      });
    }

    return scheduleResult;
  } catch (error) {
    console.error(
      "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏:",
      error
    );
    // Fallback –∫ –æ–±—ã—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    return await loadScheduleFromDatabase();
  }
}

// === –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ ===
async function reloadScheduleWithAuth() {
  // –ó–∞–±–∏—Ä–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ window.currentUser / window.userProfile
  currentUser = window.currentUser;
  userProfile = window.userProfile;

  // –ò –∑–∞–Ω–æ–≤–æ –≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ –∏ UI
  if (typeof loadData === "function") {
    await loadData();
    renderFilteredSchedule();
    updateStats();
    updateFilterFab();
    createMyGroupsControls();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º UI
async function deletePersonalClassWithUpdate(personalId) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    await deletePersonalClass(personalId);

    // –£–¥–∞–ª—è–µ–º –∏–∑ –º–æ–∏—Ö –≥—Ä—É–ø–ø –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å
    const personalKey = `personal_${personalId}`;
    if (
      typeof window.myGroups !== "undefined" &&
      window.myGroups.has(personalKey)
    ) {
      window.myGroups.delete(personalKey);
      await saveUserGroups([...window.myGroups]);
    }

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await reloadScheduleWithAuth();

    console.log("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω");
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –ø–æ ID
async function getPersonalClassById(personalId) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    const { data, error } = await supabase
      .from("user_personal_classes")
      .select("*")
      .eq("id", personalId)
      .eq("user_id", currentUser.id)
      .single();

    if (error) {
      throw error;
    }

    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ basefucs.js –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:

function debugScheduleData() {
  console.log("üîç –û–¢–õ–ê–î–ö–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø:");
  console.log("scheduleData:", scheduleData);
  console.log("timeSlots:", timeSlots);
  console.log("dayNames:", dayNames);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è
  if (timeSlots.length > 0 && Object.keys(scheduleData).length > 0) {
    const firstTime = timeSlots[0];
    const firstDay = 0;
    console.log(
      `–ó–∞–Ω—è—Ç–∏—è –≤ ${dayNames[firstDay]} –≤ ${firstTime}:`,
      scheduleData[firstTime]?.[firstDay]
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (scheduleData[firstTime]?.[firstDay]?.[0]) {
      const testClass = scheduleData[firstTime][firstDay][0];
      console.log("–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ:", testClass);
      console.log(
        "–ü—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä—ã:",
        matchesFilters(testClass, firstTime, firstDay)
      );
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const scheduleElement = document.getElementById("schedule");
  console.log("–≠–ª–µ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω:", !!scheduleElement);
  console.log(
    "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞:",
    scheduleElement?.innerHTML?.substring(0, 200) + "..."
  );
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async function loadReferenceData() {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const [classTypes, locations, teachers] = await Promise.all([
      supabase.from("class_types").select("*").order("sort_order"),
      supabase.from("locations").select("*").order("sort_order"),
      supabase.from("teachers").select("*").order("sort_order"),
    ]);

    return {
      classTypes: classTypes.data || [],
      locations: locations.data || [],
      teachers: teachers.data || [],
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:", error);
    throw error;
  }
}

// === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–ë–©–ò–ú –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–û–í) ===

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –≤ –æ–±—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
async function createScheduleClass(classData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("schedule_classes")
      .insert({
        name: classData.name,
        level: classData.level,
        teacher: classData.teacher,
        type: classData.type,
        location: classData.location,
        day_of_week: classData.day_of_week,
        time_slot: classData.time_slot,
        created_by: currentUser.id,
        updated_by: currentUser.id,
      })
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", data.name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –≤ –æ–±—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
async function updateScheduleClass(classId, classData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("schedule_classes")
      .update({
        name: classData.name,
        level: classData.level,
        teacher: classData.teacher,
        type: classData.type,
        location: classData.location,
        day_of_week: classData.day_of_week,
        time_slot: classData.time_slot,
        updated_by: currentUser.id,
      })
      .eq("id", classId)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –ó–∞–Ω—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", data.name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –∏–∑ –æ–±—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
async function deleteScheduleClass(classId) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("schedule_classes")
      .update({
        is_active: false,
        updated_by: currentUser.id,
      })
      .eq("id", classId)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –ó–∞–Ω—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ:", data.name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// === –§–£–ù–ö–¶–ò–ò –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ò–ó –û–ë–©–ï–ì–û –í –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï ===

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –∏–∑ –æ–±—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –ª–∏—á–Ω—ã–µ
async function addClassToPersonal(scheduleClass, time, day) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    const { data, error } = await supabase
      .from("user_personal_classes")
      .insert({
        user_id: currentUser.id,
        name: scheduleClass.name,
        level: scheduleClass.level,
        teacher: scheduleClass.teacher,
        location: scheduleClass.location,
        day_of_week: day,
        time_slot: time,
        type: scheduleClass.type || "added_from_schedule",
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –æ–±—â–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        source_schedule_class_id: scheduleClass.id,
      })
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", data.name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", error);
    throw error;
  }
}

// === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ü–†–ê–í–û–ß–ù–ò–ö–ê–ú–ò (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–û–í) ===

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ –∑–∞–Ω—è—Ç–∏–π
async function createClassType(typeData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("class_types")
      .insert(typeData)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è —Å–æ–∑–¥–∞–Ω:", data.display_name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

async function updateClassType(typeId, typeData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("class_types")
      .update(typeData)
      .eq("id", typeId)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω:", data.display_name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏
async function createLocation(locationData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("locations")
      .insert(locationData)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:", data.display_name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏:", error);
    throw error;
  }
}

async function updateLocation(locationId, locationData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("locations")
      .update(locationData)
      .eq("id", locationId)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", data.display_name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏:", error);
    throw error;
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
async function createTeacher(teacherData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("teachers")
      .insert(teacherData)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", data.full_name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", error);
    throw error;
  }
}

async function updateTeacher(teacherId, teacherData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("teachers")
      .update(teacherData)
      .eq("id", teacherId)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:", data.full_name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", error);
    throw error;
  }
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
function isAdmin() {
  return userProfile && userProfile.is_admin === true;
}

// === –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô ===

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
window.signInWithGoogle = signInWithGoogle;
window.logout = logout;
window.currentUser = currentUser;
window.userProfile = userProfile;
window.isAdmin = isAdmin;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
window.getUserSavedGroups = getUserSavedGroups;
window.saveUserGroups = saveUserGroups;
window.getUserPersonalClasses = getUserPersonalClasses;
window.createPersonalClass = createPersonalClass;
window.updatePersonalClass = updatePersonalClass;
window.deletePersonalClass = deletePersonalClass;
window.getPersonalClassById = getPersonalClassById;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –æ–±—â–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
window.loadScheduleFromDatabase = loadScheduleFromDatabase;
window.loadScheduleWithPersonalClasses = loadScheduleWithPersonalClasses;
window.loadReferenceData = loadReferenceData;
window.createScheduleClass = createScheduleClass;
window.updateScheduleClass = updateScheduleClass;
window.deleteScheduleClass = deleteScheduleClass;
window.addClassToPersonal = addClassToPersonal;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏
window.createClassType = createClassType;
window.updateClassType = updateClassType;
window.createLocation = createLocation;
window.updateLocation = updateLocation;
window.createTeacher = createTeacher;
window.updateTeacher = updateTeacher;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.reloadScheduleWithAuth = reloadScheduleWithAuth;
window.deletePersonalClassWithUpdate = deletePersonalClassWithUpdate;

// === –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–∞) ===
async function editScheduleClassQuick(classId) {
  if (!isAdmin()) {
    return showNotification(
      "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
      "error"
    );
  }
  try {
    const { data: classItem, error } = await supabase
      .from("schedule_classes")
      .select("*")
      .eq("id", classId)
      .single();
    if (error) throw error;

    const newName = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è:", classItem.name);
    if (newName == null) return; // –æ—Ç–º–µ–Ω–∞
    const newLevel = prompt("–£—Ä–æ–≤–µ–Ω—å:", classItem.level) || classItem.level;
    const newTeacher =
      prompt("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:", classItem.teacher) || classItem.teacher;
    const newLocation =
      prompt("–õ–æ–∫–∞—Ü–∏—è:", classItem.location) || classItem.location;

    await updateScheduleClass(classId, {
      name: newName,
      level: newLevel,
      teacher: newTeacher,
      type: classItem.type,
      location: newLocation,
      day_of_week: classItem.day_of_week,
      time_slot: classItem.time_slot,
    });

    await reloadScheduleWithAuth();
    showNotification("‚úÖ –ó–∞–Ω—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", "success");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–∞–≤–∫–∏ –∑–∞–Ω—è—Ç–∏—è:", err);
    showNotification("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ: " + err.message, "error");
  }
}

// === –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–∞) ===
async function deleteScheduleClassQuick(classId) {
  if (!isAdmin()) {
    return showNotification(
      "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
      "error"
    );
  }
  if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ?")) return;
  try {
    await deleteScheduleClass(classId);
    await reloadScheduleWithAuth();
    showNotification("‚úÖ –ó–∞–Ω—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ", "success");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", err);
    showNotification("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ: " + err.message, "error");
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
window.editScheduleClassQuick = editScheduleClassQuick;
window.deleteScheduleClassQuick = deleteScheduleClassQuick;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
window.supabase = supabase;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener("DOMContentLoaded", initAuth);
