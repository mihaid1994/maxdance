// js/auth.js - Supabase –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞ —Å –¢–í–û–ò–ú–ò –¥–∞–Ω–Ω—ã–º–∏
const supabaseUrl = "https://rxwtfqnzrhzpiupkawgq.supabase.co";
const supabaseKey =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4d3RmcW56cmh6cGl1cGthd2dxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEzNDUzMDUsImV4cCI6MjA2NjkyMTMwNX0.AP3S-aRZDm2XD-Ld9aSSfxtIigV8hWXC3rXb7TUwxSI";
const supabase = createClient(supabaseUrl, supabaseKey);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
let currentUser = null;
let userProfile = null;

// === –ë–ê–ó–û–í–ê–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function initAuth() {
  console.log("üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
  const {
    data: { session },
  } = await supabase.auth.getSession();

  if (session) {
    await handleAuthSuccess(session.user);
  }

  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  supabase.auth.onAuthStateChange(async (event, session) => {
    console.log("üîÑ Auth state changed:", event);

    if (event === "SIGNED_IN" && session) {
      await handleAuthSuccess(session.user);
    } else if (event === "SIGNED_OUT") {
      handleAuthSignOut();
    }
  });

  updateAuthUI();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function handleAuthSuccess(user) {
  console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", user.email);

  currentUser = user;

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    let { data: profile, error } = await supabase
      .from("user_profiles")
      .select("*")
      .eq("id", user.id)
      .single();

    if (error && error.code === "PGRST116") {
      // –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º
      const { data: newProfile, error: insertError } = await supabase
        .from("user_profiles")
        .insert({
          id: user.id,
          email: user.email,
          full_name:
            user.user_metadata.full_name ||
            user.user_metadata.name ||
            user.email,
          avatar_url: user.user_metadata.avatar_url,
        })
        .select()
        .single();

      if (insertError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", insertError);
      } else {
        profile = newProfile;
        console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω");
      }
    } else if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", error);
    }

    userProfile = profile;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
  }

  updateAuthUI();

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  if (typeof reloadScheduleWithAuth === "function") {
    await reloadScheduleWithAuth();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
function handleAuthSignOut() {
  console.log("üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª");
  currentUser = null;
  userProfile = null;
  updateAuthUI();

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (typeof reloadScheduleWithAuth === "function") {
    reloadScheduleWithAuth();
  }
}

// –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
async function signInWithGoogle() {
  console.log("üîë –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google...");

  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π redirect URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const redirectURL =
      window.location.hostname === "localhost"
        ? "http://localhost:3000"
        : "https://maxdance.netlify.app";

    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: "google",
      options: {
        redirectTo: redirectURL,
      },
    });

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
      alert("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google: " + error.message);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
    alert("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google");
  }
}

// –í—ã—Ö–æ–¥
async function logout() {
  console.log("üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...");

  try {
    const { error } = await supabase.auth.signOut();
    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function updateAuthUI() {
  const loginSection = document.getElementById("login-section");
  const userSection = document.getElementById("user-section");

  if (currentUser && userProfile) {
    loginSection.style.display = "none";
    userSection.style.display = "block";

    document.getElementById("user-name").textContent =
      userProfile.full_name || currentUser.email;

    const avatarImg = document.getElementById("user-avatar");
    if (userProfile.avatar_url) {
      avatarImg.src = userProfile.avatar_url;
      avatarImg.style.display = "block";
    } else {
      avatarImg.style.display = "none";
    }

    console.log("üë§ UI –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userProfile.full_name);
  } else {
    loginSection.style.display = "block";
    userSection.style.display = "none";
    console.log("üîì UI –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }
}

// === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ú–ò –ì–†–£–ü–ü–ê–ú–ò ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserSavedGroups() {
  if (!currentUser) return [];

  try {
    const { data, error } = await supabase
      .from("user_saved_groups")
      .select("group_key")
      .eq("user_id", currentUser.id);

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:", error);
      return [];
    }

    return data.map((row) => row.group_key);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:", error);
    return [];
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveUserGroups(groupKeys) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${groupKeys.length} –≥—Ä—É–ø–ø...`);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≥—Ä—É–ø–ø—ã
    const { error: deleteError } = await supabase
      .from("user_saved_groups")
      .delete()
      .eq("user_id", currentUser.id);

    if (deleteError) {
      throw deleteError;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã
    if (groupKeys.length > 0) {
      const groupsToInsert = groupKeys.map((groupKey) => ({
        user_id: currentUser.id,
        group_key: groupKey,
      }));

      const { error: insertError } = await supabase
        .from("user_saved_groups")
        .insert(groupsToInsert);

      if (insertError) {
        throw insertError;
      }
    }

    console.log("‚úÖ –ì—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø:", error);
    throw error;
  }
}

// === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ú–ò –ó–ê–ù–Ø–¢–ò–Ø–ú–ò ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserPersonalClasses() {
  if (!currentUser) return [];

  try {
    const { data, error } = await supabase
      .from("user_personal_classes")
      .select("*")
      .eq("user_id", currentUser.id)
      .order("day_of_week", { ascending: true })
      .order("time_slot", { ascending: true });

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π:", error);
      return [];
    }

    return data || [];
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π:", error);
    return [];
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
async function createPersonalClass(classData) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    const { data, error } = await supabase
      .from("user_personal_classes")
      .insert({
        user_id: currentUser.id,
        name: classData.name,
        level: classData.level || "",
        teacher: classData.teacher || "",
        location: classData.location || "",
        day_of_week: classData.day_of_week,
        time_slot: classData.time_slot,
        type: classData.type || "personal",
      })
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –õ–∏—á–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:", data.name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
async function updatePersonalClass(classId, classData) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    const { data, error } = await supabase
      .from("user_personal_classes")
      .update({
        name: classData.name,
        level: classData.level || "",
        teacher: classData.teacher || "",
        location: classData.location || "",
        day_of_week: classData.day_of_week,
        time_slot: classData.time_slot,
        type: classData.type || "personal",
      })
      .eq("id", classId)
      .eq("user_id", currentUser.id)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –õ–∏—á–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", data.name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
async function deletePersonalClass(classId) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    const { error } = await supabase
      .from("user_personal_classes")
      .delete()
      .eq("id", classId)
      .eq("user_id", currentUser.id);

    if (error) {
      throw error;
    }

    console.log("‚úÖ –õ–∏—á–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ");
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –û–ë–©–ò–ú –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú ===

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function loadScheduleFromDatabase() {
  try {
    console.log("üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
    const { data: classes, error: classesError } = await supabase
      .from("schedule_classes")
      .select("*")
      .eq("is_active", true)
      .order("day_of_week", { ascending: true })
      .order("time_slot", { ascending: true });

    if (classesError) {
      throw classesError;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    const { data: classTypes, error: typesError } = await supabase
      .from("class_types")
      .select("*")
      .eq("is_active", true)
      .order("sort_order", { ascending: true });

    const { data: locations, error: locationsError } = await supabase
      .from("locations")
      .select("*")
      .eq("is_active", true)
      .order("sort_order", { ascending: true });

    if (typesError || locationsError) {
      throw typesError || locationsError;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    const schedule = {};
    const timeSlots = new Set();
    const dayNames = [
      "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
      "–í—Ç–æ—Ä–Ω–∏–∫",
      "–°—Ä–µ–¥–∞",
      "–ß–µ—Ç–≤–µ—Ä–≥",
      "–ü—è—Ç–Ω–∏—Ü–∞",
      "–°—É–±–±–æ—Ç–∞",
      "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    ];

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–∏–ø–æ–≤
    const typeNames = {};
    classTypes.forEach((type) => {
      typeNames[type.id] = type.display_name;
    });

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–æ–∫–∞—Ü–∏–π
    const locationNames = {};
    locations.forEach((location) => {
      locationNames[location.id] = location.display_name;
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω—è–º
    classes.forEach((classItem) => {
      const time = classItem.time_slot;
      const day = classItem.day_of_week;

      timeSlots.add(time);

      if (!schedule[time]) {
        schedule[time] = {};
      }

      if (!schedule[time][day]) {
        schedule[time][day] = [];
      }

      schedule[time][day].push({
        id: classItem.id, // –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        name: classItem.name,
        level: classItem.level,
        teacher: classItem.teacher,
        type: classItem.type,
        location: classItem.location,
      });
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    const sortedTimeSlots = Array.from(timeSlots).sort((a, b) => {
      const timeA = parseInt(a.split(":")[0]) * 60 + parseInt(a.split(":")[1]);
      const timeB = parseInt(b.split(":")[0]) * 60 + parseInt(b.split(":")[1]);
      return timeA - timeB;
    });

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${classes.length} –∑–∞–Ω—è—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);

    return {
      schedule,
      timeSlots: sortedTimeSlots,
      dayNames,
      typeNames,
      locationNames,
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã:", error);
    throw error;
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async function loadReferenceData() {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const [classTypes, locations, teachers] = await Promise.all([
      supabase.from("class_types").select("*").order("sort_order"),
      supabase.from("locations").select("*").order("sort_order"),
      supabase.from("teachers").select("*").order("sort_order"),
    ]);

    return {
      classTypes: classTypes.data || [],
      locations: locations.data || [],
      teachers: teachers.data || [],
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:", error);
    throw error;
  }
}

// === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–ë–©–ò–ú –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–û–í) ===

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –≤ –æ–±—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
async function createScheduleClass(classData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("schedule_classes")
      .insert({
        name: classData.name,
        level: classData.level,
        teacher: classData.teacher,
        type: classData.type,
        location: classData.location,
        day_of_week: classData.day_of_week,
        time_slot: classData.time_slot,
        created_by: currentUser.id,
        updated_by: currentUser.id,
      })
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", data.name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –≤ –æ–±—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
async function updateScheduleClass(classId, classData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("schedule_classes")
      .update({
        name: classData.name,
        level: classData.level,
        teacher: classData.teacher,
        type: classData.type,
        location: classData.location,
        day_of_week: classData.day_of_week,
        time_slot: classData.time_slot,
        updated_by: currentUser.id,
      })
      .eq("id", classId)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –ó–∞–Ω—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", data.name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –∏–∑ –æ–±—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
async function deleteScheduleClass(classId) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("schedule_classes")
      .update({
        is_active: false,
        updated_by: currentUser.id,
      })
      .eq("id", classId)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –ó–∞–Ω—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ:", data.name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// === –§–£–ù–ö–¶–ò–ò –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ò–ó –û–ë–©–ï–ì–û –í –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï ===

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –∏–∑ –æ–±—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –ª–∏—á–Ω—ã–µ
async function addClassToPersonal(scheduleClass, time, day) {
  if (!currentUser) {
    throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  try {
    const { data, error } = await supabase
      .from("user_personal_classes")
      .insert({
        user_id: currentUser.id,
        name: scheduleClass.name,
        level: scheduleClass.level,
        teacher: scheduleClass.teacher,
        location: scheduleClass.location,
        day_of_week: day,
        time_slot: time,
        type: scheduleClass.type || "added_from_schedule",
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –æ–±—â–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        source_schedule_class_id: scheduleClass.id,
      })
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", data.name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", error);
    throw error;
  }
}

// === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ü–†–ê–í–û–ß–ù–ò–ö–ê–ú–ò (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–û–í) ===

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ –∑–∞–Ω—è—Ç–∏–π
async function createClassType(typeData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("class_types")
      .insert(typeData)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è —Å–æ–∑–¥–∞–Ω:", data.display_name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

async function updateClassType(typeId, typeData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("class_types")
      .update(typeData)
      .eq("id", typeId)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω:", data.display_name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è:", error);
    throw error;
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏
async function createLocation(locationData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("locations")
      .insert(locationData)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:", data.display_name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏:", error);
    throw error;
  }
}

async function updateLocation(locationId, locationData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("locations")
      .update(locationData)
      .eq("id", locationId)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", data.display_name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏:", error);
    throw error;
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
async function createTeacher(teacherData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("teachers")
      .insert(teacherData)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", data.full_name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", error);
    throw error;
  }
}

async function updateTeacher(teacherId, teacherData) {
  if (!isAdmin()) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  }

  try {
    const { data, error } = await supabase
      .from("teachers")
      .update(teacherData)
      .eq("id", teacherId)
      .select()
      .single();

    if (error) {
      throw error;
    }

    console.log("‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:", data.full_name);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", error);
    throw error;
  }
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
function isAdmin() {
  return userProfile && userProfile.is_admin === true;
}

// === –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô ===

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
window.signInWithGoogle = signInWithGoogle;
window.logout = logout;
window.currentUser = currentUser;
window.userProfile = userProfile;
window.isAdmin = isAdmin;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
window.getUserSavedGroups = getUserSavedGroups;
window.saveUserGroups = saveUserGroups;
window.getUserPersonalClasses = getUserPersonalClasses;
window.createPersonalClass = createPersonalClass;
window.updatePersonalClass = updatePersonalClass;
window.deletePersonalClass = deletePersonalClass;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –æ–±—â–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
window.loadScheduleFromDatabase = loadScheduleFromDatabase;
window.loadReferenceData = loadReferenceData;
window.createScheduleClass = createScheduleClass;
window.updateScheduleClass = updateScheduleClass;
window.deleteScheduleClass = deleteScheduleClass;
window.addClassToPersonal = addClassToPersonal;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏
window.createClassType = createClassType;
window.updateClassType = updateClassType;
window.createLocation = createLocation;
window.updateLocation = updateLocation;
window.createTeacher = createTeacher;
window.updateTeacher = updateTeacher;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
window.supabase = supabase;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener("DOMContentLoaded", initAuth);

// ================================
// 1) –°–æ–±–∏—Ä–∞–µ–º teachers/levels/types/locations
// ================================
function extractAllData() {
  const teachers = new Set(),
    levels = new Set(),
    types = new Set(),
    locations = new Set();

  for (const time of timeSlots || []) {
    for (let d = 0; d < (dayNames || []).length; d++) {
      const list = (scheduleData[time] && scheduleData[time][d]) || [];
      list.forEach((c) => {
        if (c.teacher) teachers.add(c.teacher);
        if (c.level) levels.add(c.level);
        if (c.type) types.add(c.type);
        if (c.location) locations.add(c.location);
      });
    }
  }

  return {
    teachers: Array.from(teachers).sort(),
    levels: Array.from(levels).sort(),
    types: Array.from(types).sort(),
    locations: Array.from(locations).sort(),
  };
}
window.extractAllData = extractAllData;

// ================================
// 2) toggleMyGroupsFilter ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å ¬´–ú–æ–∏ –≥—Ä—É–ø–ø—ã¬ª
// ================================
function toggleMyGroupsFilter() {
  activeFilters.showMyGroupsOnly = !activeFilters.showMyGroupsOnly;
  // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
  if (typeof reloadScheduleWithAuth === "function") {
    reloadScheduleWithAuth();
  } else {
    renderFilteredSchedule();
    updateStats();
    updateFilterFab();
  }
}
window.toggleMyGroupsFilter = toggleMyGroupsFilter;

// ================================
// 3) –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ off-canvas-—Ñ–∏–ª—å—Ç—Ä–æ–≤
// ================================
function toggleFilters() {
  document.getElementById("filters-overlay").classList.toggle("active");
  document.getElementById("filters-sidebar").classList.toggle("active");
}
window.toggleFilters = toggleFilters;

function closeFilters() {
  document.getElementById("filters-overlay").classList.remove("active");
  document.getElementById("filters-sidebar").classList.remove("active");
}
window.closeFilters = closeFilters;
